<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天然呆</title>
  
  <subtitle>My exclusive</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/yibinliao/yibinliao.github/"/>
  <updated>2019-12-19T06:49:41.932Z</updated>
  <id>https://github.com/yibinliao/yibinliao.github/</id>
  
  <author>
    <name>宜彬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于POI导出Excel多级表头带标题与表尾的封装方法</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/18/2019-12-18-note-3/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/18/2019-12-18-note-3/</id>
    <published>2019-12-18T07:59:34.343Z</published>
    <updated>2019-12-19T06:49:41.932Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><blockquote><p>前言：关于该方法呢主要是来源于<a href="https://blog.csdn.net/csdn_jy/article/details/84943397" target="_blank" rel="noopener">该博主</a>提供的资料，我主要是稍微修改下并记录。额外添加的内容就是表格标题，理论上支持导出一级、二级、三级等多级表头Excel文档，测试一级、二级是OK的，先上效果图如下： </p></blockquote><p>&emsp;&emsp;<strong>这是导出一级表头的Excel文档效果图：</strong> </p><p><img src="https://liaoyibin.vip/images/2019-12-18-note-3-001.png" alt="image">  </p><p>&emsp;&emsp;<strong>这是导出二级表头的Excel文档效果图：</strong> </p><p><img src="https://liaoyibin.vip/images/2019-12-18-note-3-002.png" alt="image">  </p><h1 id="一级表头的实现"><a href="#一级表头的实现" class="headerlink" title="一级表头的实现"></a>一级表头的实现</h1><p>&emsp;&emsp;首先呢说下一级表头是实现，从简单的开始： </p><blockquote><p>先上工具类封装的统一方法： </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ylz.packcommon.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ylz.bizDo.statisticalReports.vo.Record;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.RichTextString;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ExcelUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:POI实现导出含多级表头和含有表尾部信息的excel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: lyb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/12/17 11:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> : V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> lyb </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> //TODO 多级表头Excel文件导出</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 11:24 2019/12/17 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> [sheetName, head, dataList, type, tableEndData，out，titles] sheet名,多级表头,导出数据,导出类型,表尾,输出文件对象,首行标题</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> org.apache.poi.xssf.usermodel.XSSFWorkbook </span></span><br><span class="line"><span class="comment">    **/</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> XSSFWorkbook <span class="title">exportMultilevelHeader</span><span class="params">(String sheetName, String[][] head, List&lt;?&gt; dataList, Class type, String[][] tableEndData, OutputStream out,String titles)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*变量*/</span></span><br><span class="line">        String[] properties;</span><br><span class="line">        Object[] rowValue;</span><br><span class="line">        List&lt;Object[]&gt; values;</span><br><span class="line">        Field[] fields;</span><br><span class="line">        XSSFCell cell;</span><br><span class="line">        String vo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*导出Excel*/</span></span><br><span class="line">        <span class="comment">// 第一步，创建一个workBook，对应一个Excel文件</span></span><br><span class="line">        XSSFWorkbook wb = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表头 标题样式</span></span><br><span class="line">        XSSFFont titleFont = wb.createFont();</span><br><span class="line">        titleFont.setFontName(<span class="string">"微软雅黑"</span>);<span class="comment">//字体</span></span><br><span class="line">        titleFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">15</span>);<span class="comment">// 字体大小</span></span><br><span class="line">        XSSFCellStyle titleStyle = wb.createCellStyle();</span><br><span class="line">        titleStyle.setFont(titleFont);</span><br><span class="line">        titleStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);<span class="comment">// 左右居中</span></span><br><span class="line">        titleStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);<span class="comment">// 上下居中</span></span><br><span class="line">        titleStyle.setLocked(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二步，在workBook中添加一个sheet,对应Excel文件中的sheet</span></span><br><span class="line">        XSSFSheet sheet = wb.createSheet(sheetName);</span><br><span class="line">        <span class="comment">// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short</span></span><br><span class="line">        XSSFRow row;</span><br><span class="line">        <span class="comment">// 第四步，创建单元格，并设置值表头 设置表头居中</span></span><br><span class="line">        <span class="comment">//生成一个Style</span></span><br><span class="line">        XSSFCellStyle style = wb.createCellStyle();</span><br><span class="line">        style.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">        style.setAlignment(XSSFCellStyle.ALIGN_CENTER);<span class="comment">//水平居中</span></span><br><span class="line">        style.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);<span class="comment">//垂直居中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mergerNum = <span class="number">0</span>; <span class="comment">//合并数</span></span><br><span class="line">        <span class="comment">//添加表格标题</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,  type.getDeclaredFields().length- <span class="number">1</span>));</span><br><span class="line">        row = sheet.createRow(<span class="number">0</span>);<span class="comment">//创建一行表格</span></span><br><span class="line">        row.setHeight((<span class="keyword">short</span>) <span class="number">0x349</span>);<span class="comment">//设置高度</span></span><br><span class="line">        cell = row.createCell(<span class="number">0</span>);<span class="comment">//创建单元格</span></span><br><span class="line">        cell.setCellStyle(titleStyle);<span class="comment">//设置样式</span></span><br><span class="line">        cell.setCellValue(titles);<span class="comment">//设置标题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给单元格设置值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; head.length; i++) &#123;</span><br><span class="line">            row = sheet.createRow(i+<span class="number">1</span>);</span><br><span class="line">            row.setHeight((<span class="keyword">short</span>) <span class="number">700</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; head[i].length; j++) &#123;</span><br><span class="line">                cell = row.createCell(j);</span><br><span class="line">                cell.setCellStyle(style);</span><br><span class="line">                cell.setCellValue(head[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, List&lt;Integer&gt;&gt;();   <span class="comment">// 合并行时要跳过的行列</span></span><br><span class="line">        <span class="comment">//合并行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; head[head.length - <span class="number">1</span>].length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">""</span>.equals(head[head.length - <span class="number">1</span>][i])) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = head.length - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">""</span>.equals(head[j][i])) &#123;</span><br><span class="line">                        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(j+<span class="number">1</span>, head.length, i, i)); <span class="comment">// 合并单元格</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (map.containsKey(j)) &#123;</span><br><span class="line">                            List&lt;Integer&gt; list = map.get(j);</span><br><span class="line">                            list.add(i);</span><br><span class="line">                            map.put(j, list);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                            list.add(i);</span><br><span class="line">                            map.put(j, list);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//合并列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; head.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; head[i].length; j++) &#123;</span><br><span class="line">                List&lt;Integer&gt; list = map.get(i);</span><br><span class="line">                <span class="keyword">if</span> (list == <span class="keyword">null</span> || (list != <span class="keyword">null</span> &amp;&amp; !list.contains(j))) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">""</span>.equals(head[i][j])) &#123;</span><br><span class="line">                        mergerNum++;</span><br><span class="line">                        <span class="keyword">if</span> (mergerNum != <span class="number">0</span> &amp;&amp; j == (head[i].length - <span class="number">1</span>)) &#123;</span><br><span class="line">                            sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(i, i, j - mergerNum, j)); <span class="comment">// 合并单元格</span></span><br><span class="line">                            mergerNum = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mergerNum != <span class="number">0</span>) &#123;</span><br><span class="line">                            sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(i+<span class="number">1</span>, i+<span class="number">1</span>, j - mergerNum - <span class="number">1</span>, j - <span class="number">1</span>)); <span class="comment">// 合并单元格</span></span><br><span class="line">                            mergerNum = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析导出类型</span></span><br><span class="line">        Class&lt;Record&gt; recordClass = Record<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == type) &#123;</span><br><span class="line">            <span class="comment">//导出失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(recordClass)) &#123;</span><br><span class="line">            <span class="comment">//导出List&lt;Record&gt;</span></span><br><span class="line">            <span class="comment">//获取Record中包含的properties，用于生成表格头及创建Cell</span></span><br><span class="line">            properties = getRecordProperties(dataList, <span class="keyword">null</span>);</span><br><span class="line">            vo = <span class="string">"record"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//导出List&lt;Bean&gt;</span></span><br><span class="line">            <span class="comment">//获取Bean的Field</span></span><br><span class="line">            fields = type.getDeclaredFields();</span><br><span class="line">            properties = getRecordProperties(<span class="keyword">null</span>, fields);</span><br><span class="line">            vo = <span class="string">"bean"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                i = head.length - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head[i] = properties;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第五步，写入实体数据</span></span><br><span class="line">        <span class="comment">/*表头行数*/</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            m = head.length;</span><br><span class="line">        &#125;</span><br><span class="line">        values = getRowValue(dataList, properties, vo);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dataList.size(); i++) &#123;</span><br><span class="line">            row = sheet.createRow(i + m+<span class="number">1</span>); <span class="comment">//创建行</span></span><br><span class="line">            rowValue = values.get(i);</span><br><span class="line">            <span class="comment">// 第四步，创建单元格，并设置值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; properties.length; j++) &#123;</span><br><span class="line">                cell = row.createCell(j);</span><br><span class="line">                cell.setCellStyle(style);</span><br><span class="line">                setCellValue(cell, rowValue[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第六步，处理表格尾部的数据</span></span><br><span class="line">        <span class="keyword">if</span> (tableEndData != <span class="keyword">null</span> &amp;&amp; tableEndData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tableEndData.length; i++) &#123;</span><br><span class="line">                row = sheet.createRow(dataList.size() + m + i);</span><br><span class="line">                sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(dataList.size() + m + i, dataList.size() + m + i, <span class="number">0</span>,  type.getDeclaredFields().length- <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tableEndData[i].length; j++) &#123;</span><br><span class="line">                    cell = row.createCell(j);</span><br><span class="line">                    cell.setCellStyle(style);</span><br><span class="line">                    setCellValue(cell, tableEndData[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wb.write(out);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> lyb </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> //TODO 获取Record包含的所有properties </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 11:30 2019/12/17 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> [list, fields] 列名,属性</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> java.lang.String[] 包含properties</span></span><br><span class="line"><span class="comment">    **/</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] getRecordProperties(List&lt;?&gt; list, Field[] fields) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list &amp;&amp; <span class="keyword">null</span> == fields) &#123;</span><br><span class="line">            Record record = (Record) list.get(<span class="number">0</span>);</span><br><span class="line">            Set&lt;String&gt; keySet = record.keySet();</span><br><span class="line">            List&lt;String&gt; keysList = <span class="keyword">new</span> ArrayList&lt;&gt;(keySet);</span><br><span class="line">            <span class="keyword">return</span> keysList.toArray(<span class="keyword">new</span> String[keysList.size()]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != fields &amp;&amp; <span class="keyword">null</span> == list) &#123;</span><br><span class="line">            String[] properties = <span class="keyword">new</span> String[fields.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">                properties[i] = fields[i].getName();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> properties;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> lyb </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> //TODO 转换列表数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 11:33 2019/12/17 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> [list, properties, vo] 数据列表,属性列表,类型</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> java.util.List&lt;java.lang.Object[]&gt; 转换后的数据</span></span><br><span class="line"><span class="comment">    **/</span> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Object[]&gt; getRowValue(List&lt;?&gt; list, String[] properties, String vo) &#123;</span><br><span class="line">        List&lt;Object[]&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Record record;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(vo)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"record"</span>.equals(vo)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">                record = (Record) object;</span><br><span class="line">                Object[] values = <span class="keyword">new</span> Object[properties.length];    <span class="comment">//定义在外部数组值会被最后写入的覆盖</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; properties.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    values[i] = record.get(properties[i]);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                resultList.add(values);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"bean"</span>.equals(vo)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">                Class cf = object.getClass();</span><br><span class="line">                Object[] values = <span class="keyword">new</span> Object[properties.length];    <span class="comment">//定义在外部数组值会被最后写入的覆盖</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; properties.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">char</span>[] name = properties[i].toCharArray();</span><br><span class="line">                    name[<span class="number">0</span>] -= <span class="number">32</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Method method = cf.getMethod(<span class="string">"get"</span> + String.valueOf(name));</span><br><span class="line">                        values[i] = method.invoke(object);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                resultList.add(values);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> lyb </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> //TODO 设置单元格值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 11:34 2019/12/17 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> [cell, value] 单元格,值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void </span></span><br><span class="line"><span class="comment">    **/</span> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCellValue</span><span class="params">(XSSFCell cell, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            cell.setCellValue((String) value);</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_STRING);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">            cell.setCellValue((Date) value);</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_STRING);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            cell.setCellValue((Boolean) value);</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_BOOLEAN);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Double) &#123;</span><br><span class="line">            cell.setCellValue((Double) value);</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_NUMERIC);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Calendar) &#123;</span><br><span class="line">            cell.setCellValue((Calendar) value);</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_STRING);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RichTextString) &#123;</span><br><span class="line">            cell.setCellValue((RichTextString) value);</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_STRING);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cell.setCellValue(String.valueOf(value));</span><br><span class="line">            cell.setCellType(XSSFCell.CELL_TYPE_STRING);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> lyb</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> //TODO 测试方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 13:26 2019/12/19</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> [args]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        //标题</span></span><br><span class="line"><span class="comment">//        String titles="小脆皮";</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //表头名</span></span><br><span class="line"><span class="comment">//        String[][] headNames = &#123;&#123;"鲁班","小乔","安琪拉","甑姬","王昭君"&#125;&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //表尾名</span></span><br><span class="line"><span class="comment">//        String[][] tableEnd = &#123;&#123;"不准看：    "&#125;&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        List&lt;Testvo&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        for (int i=0;i&lt;5;i++) &#123;</span></span><br><span class="line"><span class="comment">//            Testvo vo=new Testvo();</span></span><br><span class="line"><span class="comment">//            vo.setNo("1");</span></span><br><span class="line"><span class="comment">//            vo.setName("鲁班大师");</span></span><br><span class="line"><span class="comment">//            vo.setSex("男");</span></span><br><span class="line"><span class="comment">//            vo.setAge(26);</span></span><br><span class="line"><span class="comment">//            vo.setMoney("13888");</span></span><br><span class="line"><span class="comment">//            list.add(vo);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        OutputStream out = new FileOutputStream("C:\\Users\\lyb\\Desktop\\测试汇总表.xls");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //导出</span></span><br><span class="line"><span class="comment">//        exportMultilevelHeader("测试汇总",headNames,list,Testvo.class,tableEnd,out,titles);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<strong><span style="color:red;">这里有一个类需要说明下，就是Record类进行重写了，作用其实就是中间接收我们需导出数据的实体类属性，该类贴码如下：</span></strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ylz.bizDo.statisticalReports.vo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Record</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:该类用于POI多级表头Excel文件导出,用于接收导出实体属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: lyb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/12/17 11:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> : V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String field,Object value)</span></span>&#123;</span><br><span class="line">        put(field,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String)get(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">(String field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer)get(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getLong</span><span class="params">(String field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Long)get(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBigDecimal</span><span class="params">(String field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (BigDecimal)get(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">(String field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Date)get(field);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoolean</span><span class="params">(String field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) get(field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后呢就是一级表头文档导出的测试方法了： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    String titles=<span class="string">"小脆皮"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表头名</span></span><br><span class="line">    String[][] headNames = &#123;&#123;<span class="string">"鲁班"</span>,<span class="string">"小乔"</span>,<span class="string">"安琪拉"</span>,<span class="string">"甑姬"</span>,<span class="string">"王昭君"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表尾名</span></span><br><span class="line">    String[][] tableEnd = &#123;&#123;<span class="string">"不准看：    "</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;Testvo&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">        Testvo vo=<span class="keyword">new</span> Testvo();</span><br><span class="line">        vo.setNo(<span class="string">"1"</span>);</span><br><span class="line">        vo.setName(<span class="string">"鲁班大师"</span>);</span><br><span class="line">        vo.setSex(<span class="string">"男"</span>);</span><br><span class="line">        vo.setAge(<span class="number">26</span>);</span><br><span class="line">        vo.setMoney(<span class="string">"13888"</span>);</span><br><span class="line">        list.add(vo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\Users\\lyb\\Desktop\\测试汇总表.xls"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导出</span></span><br><span class="line">    exportMultilevelHeader(<span class="string">"测试汇总"</span>,headNames,list,Testvo<span class="class">.<span class="keyword">class</span>,<span class="title">tableEnd</span>,<span class="title">out</span>,<span class="title">titles</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;至于TestVo类就不需要我贴了吧，只是一个测试类只有get、set方法，属性就循环的那些。 </p><hr><p>&emsp;&emsp;至于二级表头的测试方法如下，主要内容都在工具类里面。基本上都有写注释相信应该可以看明白。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> lyb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> //TODO 家庭签约登记统计Excel导出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 9:43 2019/12/17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span> []</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findRegistrationStatisticalToExcel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        RegistrationListQvo qvo = (RegistrationListQvo) getJsonLay(RegistrationListQvo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(qvo==<span class="keyword">null</span>)&#123;</span><br><span class="line">            qvo=<span class="keyword">new</span> RegistrationListQvo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//登录人信息</span></span><br><span class="line">        CdUser user = <span class="keyword">this</span>.getSessionUser();</span><br><span class="line">        <span class="comment">//导出数据</span></span><br><span class="line">        List&lt;RegistrationStatisticalExportVo&gt; listData = sysDao.getStattisticalReportsDao().registrationListExport(qvo);</span><br><span class="line">        <span class="comment">//Excel导出标题</span></span><br><span class="line">        String titles = <span class="string">"登记表"</span>;</span><br><span class="line">        <span class="comment">//表头名</span></span><br><span class="line">        String[][] headNames = &#123;&#123;<span class="string">"姓名"</span>,<span class="string">"性别"</span>,<span class="string">"身份证号"</span>,<span class="string">"联系电话"</span>,<span class="string">"签约编码"</span>,<span class="string">"签约家庭类别"</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>, <span class="string">"重点人群签约服务项目"</span>, <span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>, <span class="string">"其他人群"</span>, <span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">"签约服务包类型"</span>,<span class="string">"备注"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">"计生失独伤残家庭"</span>, <span class="string">"计生独生子女"</span>, <span class="string">"计生双女"</span>, <span class="string">"五保户"</span>, <span class="string">"低保户"</span>,<span class="string">"建档立卡贫困人口"</span>,<span class="string">"其他"</span>, <span class="string">"老年人"</span>,<span class="string">"高血压患者"</span>,<span class="string">"2型糖尿病患者"</span>,<span class="string">"严重精神障碍患者"</span>,<span class="string">"结核病患者"</span>,<span class="string">"孕产妇"</span>,<span class="string">"0-6岁儿童"</span>, <span class="string">"残疾人"</span>, <span class="string">"脑血管病患者"</span>, <span class="string">"冠心病患者"</span>,<span class="string">"癌症患者"</span>,<span class="string">"其他"</span>,<span class="string">""</span>,<span class="string">""</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表尾名</span></span><br><span class="line">        String[][] tableEnd = &#123;&#123;<span class="string">"填报人:          分管院长：                填报时间：    年    月    日"</span>&#125;&#125;;</span><br><span class="line">        getResponse().reset();</span><br><span class="line">        getResponse().setContentType(<span class="string">"application/vnd..ms-excel"</span>);</span><br><span class="line">        getResponse().setHeader(<span class="string">"content-Disposition"</span>,<span class="string">"attachment;filename="</span>+ URLEncoder.encode(<span class="string">"汇总表.xls"</span>,<span class="string">"utf-8"</span>));</span><br><span class="line">        ExcelUtils.exportMultilevelHeader(<span class="string">"汇总表"</span>,headNames,listData, RegistrationStatisticalExportVo<span class="class">.<span class="keyword">class</span>,<span class="title">tableEnd</span>,<span class="title">getResponse</span>().<span class="title">getOutputStream</span>(),<span class="title">titles</span>)</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">new</span> ActionException(getClass(), getAct(), getJsons(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码什么的都已经贴完了，也没别的东西了。</strong> </p><hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Note" scheme="https://github.com/yibinliao/yibinliao.github/categories/Note/"/>
    
    
      <category term="note" scheme="https://github.com/yibinliao/yibinliao.github/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>关于layUI多级表头</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/18/2019-12-18-note-2/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/18/2019-12-18-note-2/</id>
    <published>2019-12-18T07:51:46.594Z</published>
    <updated>2019-12-18T07:58:50.263Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><h1 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h1><p>&emsp;&emsp;记录下使用layUI多级表头时犯的一个错误，其实主要原因是我多写了一个逗号 “ , ” 导致报错的，我的表格只有2级表头，在第二级时多写了一个逗号 </p><h1 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">179</span> Laytpl <span class="built_in">Error</span>：<span class="built_in">TypeError</span>: Cannot read property <span class="string">'fixed'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br><span class="line">&lt;div class="layui-form layui-border-box &#123;&#123;d.VIEW_CLASS&#125;&#125;" lay-filter="LAY-table-&#123;&#123;d.index&#125;&#125;" style="&#123;&#123;# if(d.data.width)&#123; &#125;&#125;width:&#123;&#123;d.data.width&#125;&#125;px;&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.height)&#123; &#125;&#125;height:&#123;&#123;d.data.height&#125;&#125;px;&#123;&#123;# &#125; &#125;&#125;"&gt;&#123;&#123;# var left, right; &#125;&#125;&lt;div class="layui-table-header"&gt;&lt;table cellspacing="0" cellpadding="0" border="0" class="layui-table" &#123;&#123;# if(d.data.skin)&#123; &#125;&#125;lay-skin="&#123;&#123;d.data.skin&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.size)&#123; &#125;&#125;lay-size="&#123;&#123;d.data.size&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.even)&#123; &#125;&#125;lay-even&#123;&#123;# &#125; &#125;&#125;&gt;&lt;thead&gt;&#123;&#123;# layui.each(d.data.cols, function(i1, item1)&#123; &#125;&#125;&lt;tr&gt;&#123;&#123;# layui.each(item1, function(i2, item2)&#123; &#125;&#125;&#123;&#123;# if(item2.fixed &amp;&amp; item2.fixed !== "right")&#123; left = true; &#125; &#125;&#125;&#123;&#123;# if(item2.fixed === "right")&#123; right = true; &#125; &#125;&#125;&#123;&#123;# if(item2.checkbox)&#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" data-type="checkbox" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; unresize="true"&gt;&lt;div class="layui-table-cell laytable-cell-checkbox"&gt;&lt;input type="checkbox" name="layTableCheckbox" lay-skin="primary" lay-filter="layTableAllChoose" &#123;&#123;# if(item2[d.data.checkName])&#123; &#125;&#125;checked&#123;&#123;# &#125;; &#125;&#125;&gt;&lt;/div&gt;&lt;/th&gt;&#123;&#123;# &#125; else if(item2.space)&#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; unresize="true"&gt;&lt;div class="layui-table-cell laytable-cell-space"&gt;&lt;/div&gt;&lt;/th&gt;&#123;&#123;# &#125; else &#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; &#123;&#123;# if(item2.unresize)&#123; &#125;&#125;unresize="true"&#123;&#123;# &#125; &#125;&#125;&gt;&#123;&#123;# if(item2.colspan &gt; 1)&#123; &#125;&#125;&lt;div class="layui-table-cell laytable-cell-group" &#123;&#123;#if(item2.align)&#123;&#125;&#125;align="&#123;&#123;item2.align&#125;&#125;"&#123;&#123;#&#125;&#125;&#125;&gt;&lt;span&gt;&#123;&#123;item2.title||""&#125;&#125;&lt;/span&gt;&lt;/div&gt;&#123;&#123;# &#125; else &#123; &#125;&#125;&lt;div class="layui-table-cell laytable-cell-&#123;&#123;d.index&#125;&#125;-&#123;&#123;item2.field||i2&#125;&#125;" &#123;&#123;#if(item2.align)&#123;&#125;&#125;align="&#123;&#123;item2.align&#125;&#125;"&#123;&#123;#&#125;&#125;&#125;&gt;&lt;span&gt;&#123;&#123;item2.title||""&#125;&#125;&lt;/span&gt;&#123;&#123;# if(item2.sort)&#123; &#125;&#125;&lt;span class="layui-table-sort layui-inline"&gt;&lt;i class="layui-edge layui-table-sort-asc"&gt;&lt;/i&gt;&lt;i class="layui-edge layui-table-sort-desc"&gt;&lt;/i&gt;&lt;/span&gt;&#123;&#123;# &#125; &#125;&#125;&lt;/div&gt;&#123;&#123;# &#125; &#125;&#125;&lt;/th&gt;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# &#125;); &#125;&#125;&lt;/tr&gt;&#123;&#123;# &#125;); &#125;&#125;&lt;/thead&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="layui-table-body layui-table-main"&gt;&lt;table cellspacing="0" cellpadding="0" border="0" class="layui-table" &#123;&#123;# if(d.data.skin)&#123; &#125;&#125;lay-skin="&#123;&#123;d.data.skin&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.size)&#123; &#125;&#125;lay-size="&#123;&#123;d.data.size&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.even)&#123; &#125;&#125;lay-even&#123;&#123;# &#125; &#125;&#125;&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&#123;&#123;# if(left)&#123; &#125;&#125;&lt;div class="layui-table-fixed layui-table-fixed-l"&gt;&lt;div class="layui-table-header"&gt;&lt;table cellspacing="0" cellpadding="0" border="0" class="layui-table" &#123;&#123;# if(d.data.skin)&#123; &#125;&#125;lay-skin="&#123;&#123;d.data.skin&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.size)&#123; &#125;&#125;lay-size="&#123;&#123;d.data.size&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.even)&#123; &#125;&#125;lay-even&#123;&#123;# &#125; &#125;&#125;&gt;&lt;thead&gt;&#123;&#123;# layui.each(d.data.cols, function(i1, item1)&#123; &#125;&#125;&lt;tr&gt;&#123;&#123;# layui.each(item1, function(i2, item2)&#123; &#125;&#125;&#123;&#123;# if(item2.fixed &amp;&amp; item2.fixed !== "right")&#123; left = true; &#125; &#125;&#125;&#123;&#123;# if(item2.fixed === "right")&#123; right = true; &#125; &#125;&#125;&#123;&#123;# if(item2.fixed &amp;&amp; item2.fixed !== "right")&#123; &#125;&#125;&#123;&#123;# if(item2.checkbox)&#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" data-type="checkbox" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; unresize="true"&gt;&lt;div class="layui-table-cell laytable-cell-checkbox"&gt;&lt;input type="checkbox" name="layTableCheckbox" lay-skin="primary" lay-filter="layTableAllChoose" &#123;&#123;# if(item2[d.data.checkName])&#123; &#125;&#125;checked&#123;&#123;# &#125;; &#125;&#125;&gt;&lt;/div&gt;&lt;/th&gt;&#123;&#123;# &#125; else if(item2.space)&#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; unresize="true"&gt;&lt;div class="layui-table-cell laytable-cell-space"&gt;&lt;/div&gt;&lt;/th&gt;&#123;&#123;# &#125; else &#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; &#123;&#123;# if(item2.unresize)&#123; &#125;&#125;unresize="true"&#123;&#123;# &#125; &#125;&#125;&gt;&#123;&#123;# if(item2.colspan &gt; 1)&#123; &#125;&#125;&lt;div class="layui-table-cell laytable-cell-group" &#123;&#123;#if(item2.align)&#123;&#125;&#125;align="&#123;&#123;item2.align&#125;&#125;"&#123;&#123;#&#125;&#125;&#125;&gt;&lt;span&gt;&#123;&#123;item2.title||""&#125;&#125;&lt;/span&gt;&lt;/div&gt;&#123;&#123;# &#125; else &#123; &#125;&#125;&lt;div class="layui-table-cell laytable-cell-&#123;&#123;d.index&#125;&#125;-&#123;&#123;item2.field||i2&#125;&#125;" &#123;&#123;#if(item2.align)&#123;&#125;&#125;align="&#123;&#123;item2.align&#125;&#125;"&#123;&#123;#&#125;&#125;&#125;&gt;&lt;span&gt;&#123;&#123;item2.title||""&#125;&#125;&lt;/span&gt;&#123;&#123;# if(item2.sort)&#123; &#125;&#125;&lt;span class="layui-table-sort layui-inline"&gt;&lt;i class="layui-edge layui-table-sort-asc"&gt;&lt;/i&gt;&lt;i class="layui-edge layui-table-sort-desc"&gt;&lt;/i&gt;&lt;/span&gt;&#123;&#123;# &#125; &#125;&#125;&lt;/div&gt;&#123;&#123;# &#125; &#125;&#125;&lt;/th&gt;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# &#125;); &#125;&#125;&lt;/tr&gt;&#123;&#123;# &#125;); &#125;&#125;&lt;/thead&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="layui-table-body"&gt;&lt;table cellspacing="0" cellpadding="0" border="0" class="layui-table" &#123;&#123;# if(d.data.skin)&#123; &#125;&#125;lay-skin="&#123;&#123;d.data.skin&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.size)&#123; &#125;&#125;lay-size="&#123;&#123;d.data.size&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.even)&#123; &#125;&#125;lay-even&#123;&#123;# &#125; &#125;&#125;&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# if(right)&#123; &#125;&#125;&lt;div class="layui-table-fixed layui-table-fixed-r"&gt;&lt;div class="layui-table-header"&gt;&lt;table cellspacing="0" cellpadding="0" border="0" class="layui-table" &#123;&#123;# if(d.data.skin)&#123; &#125;&#125;lay-skin="&#123;&#123;d.data.skin&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.size)&#123; &#125;&#125;lay-size="&#123;&#123;d.data.size&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.even)&#123; &#125;&#125;lay-even&#123;&#123;# &#125; &#125;&#125;&gt;&lt;thead&gt;&#123;&#123;# layui.each(d.data.cols, function(i1, item1)&#123; &#125;&#125;&lt;tr&gt;&#123;&#123;# layui.each(item1, function(i2, item2)&#123; &#125;&#125;&#123;&#123;# if(item2.fixed &amp;&amp; item2.fixed !== "right")&#123; left = true; &#125; &#125;&#125;&#123;&#123;# if(item2.fixed === "right")&#123; right = true; &#125; &#125;&#125;&#123;&#123;# if(item2.fixed === "right")&#123; &#125;&#125;&#123;&#123;# if(item2.checkbox)&#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" data-type="checkbox" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; unresize="true"&gt;&lt;div class="layui-table-cell laytable-cell-checkbox"&gt;&lt;input type="checkbox" name="layTableCheckbox" lay-skin="primary" lay-filter="layTableAllChoose" &#123;&#123;# if(item2[d.data.checkName])&#123; &#125;&#125;checked&#123;&#123;# &#125;; &#125;&#125;&gt;&lt;/div&gt;&lt;/th&gt;&#123;&#123;# &#125; else if(item2.space)&#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; unresize="true"&gt;&lt;div class="layui-table-cell laytable-cell-space"&gt;&lt;/div&gt;&lt;/th&gt;&#123;&#123;# &#125; else &#123; &#125;&#125;&lt;th data-field="&#123;&#123; item2.field||i2 &#125;&#125;" &#123;&#123;#if(item2.colspan)&#123;&#125;&#125; colspan="&#123;&#123;item2.colspan&#125;&#125;"&#123;&#123;#&#125; if(item2.rowspan)&#123;&#125;&#125; rowspan="&#123;&#123;item2.rowspan&#125;&#125;"&#123;&#123;#&#125;&#125;&#125; &#123;&#123;# if(item2.unresize)&#123; &#125;&#125;unresize="true"&#123;&#123;# &#125; &#125;&#125;&gt;&#123;&#123;# if(item2.colspan &gt; 1)&#123; &#125;&#125;&lt;div class="layui-table-cell laytable-cell-group" &#123;&#123;#if(item2.align)&#123;&#125;&#125;align="&#123;&#123;item2.align&#125;&#125;"&#123;&#123;#&#125;&#125;&#125;&gt;&lt;span&gt;&#123;&#123;item2.title||""&#125;&#125;&lt;/span&gt;&lt;/div&gt;&#123;&#123;# &#125; else &#123; &#125;&#125;&lt;div class="layui-table-cell laytable-cell-&#123;&#123;d.index&#125;&#125;-&#123;&#123;item2.field||i2&#125;&#125;" &#123;&#123;#if(item2.align)&#123;&#125;&#125;align="&#123;&#123;item2.align&#125;&#125;"&#123;&#123;#&#125;&#125;&#125;&gt;&lt;span&gt;&#123;&#123;item2.title||""&#125;&#125;&lt;/span&gt;&#123;&#123;# if(item2.sort)&#123; &#125;&#125;&lt;span class="layui-table-sort layui-inline"&gt;&lt;i class="layui-edge layui-table-sort-asc"&gt;&lt;/i&gt;&lt;i class="layui-edge layui-table-sort-desc"&gt;&lt;/i&gt;&lt;/span&gt;&#123;&#123;# &#125; &#125;&#125;&lt;/div&gt;&#123;&#123;# &#125; &#125;&#125;&lt;/th&gt;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# &#125;); &#125;&#125;&lt;/tr&gt;&#123;&#123;# &#125;); &#125;&#125;&lt;/thead&gt;&lt;/table&gt;&lt;div class="layui-table-mend"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="layui-table-body"&gt;&lt;table cellspacing="0" cellpadding="0" border="0" class="layui-table" &#123;&#123;# if(d.data.skin)&#123; &#125;&#125;lay-skin="&#123;&#123;d.data.skin&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.size)&#123; &#125;&#125;lay-size="&#123;&#123;d.data.size&#125;&#125;"&#123;&#123;# &#125; &#125;&#125; &#123;&#123;# if(d.data.even)&#123; &#125;&#125;lay-even&#123;&#123;# &#125; &#125;&#125;&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&#123;&#123;# &#125;; &#125;&#125;&#123;&#123;# if(d.data.page)&#123; &#125;&#125;&lt;div class="layui-table-tool"&gt;&lt;div class="layui-inline layui-table-page" id="layui-table-page&#123;&#123;d.index&#125;&#125;"&gt;&lt;/div&gt;&lt;/div&gt;&#123;&#123;# &#125; &#125;&#125;&lt;style&gt;&#123;&#123;# layui.each(d.data.cols, function(i1, item1)&#123;layui.each(item1, function(i2, item2)&#123; &#125;&#125;.laytable-cell-&#123;&#123;d.index&#125;&#125;-&#123;&#123;item2.field||i2&#125;&#125;&#123; width:&#123;&#123;item2.width||50&#125;&#125;px &#125;&#123;&#123;# &#125;);&#125;); &#125;&#125;&lt;/style&gt;&lt;/div&gt;</span><br><span class="line">error @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">179</span></span><br><span class="line">t.pt.parse @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">199</span></span><br><span class="line">t.pt.render @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">203</span></span><br><span class="line">H.render @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">4722</span></span><br><span class="line">H @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">4706</span></span><br><span class="line">d.render @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">5048</span></span><br><span class="line">listRegistration @ sign_regisrationCountList.js?v=<span class="number">1.1</span><span class="number">.3</span>:<span class="number">21</span></span><br><span class="line">onclick @ sign_regisrationCountList.jsp?<span class="number">1</span>=<span class="number">1</span>&amp;loginMenuId=<span class="number">01</span>ffadb7<span class="number">-0</span>a28<span class="number">-4</span>f89<span class="number">-9</span>c6d-aadf1dcf3934:<span class="number">91</span></span><br><span class="line">layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1807</span> Uncaught <span class="built_in">Error</span>: Syntax error, unrecognized expression: Laytpl <span class="built_in">Error</span>：<span class="built_in">TypeError</span>: Cannot read property <span class="string">'fixed'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br><span class="line">    at <span class="built_in">Function</span>.t.error (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1807</span>)</span><br><span class="line">    at t.tokenize (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1989</span>)</span><br><span class="line">    at t.select (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1998</span>)</span><br><span class="line">    at <span class="built_in">Function</span>.t [<span class="keyword">as</span> find] (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1514</span>)</span><br><span class="line">    at pe.fn.init.find (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">2049</span>)</span><br><span class="line">    at <span class="keyword">new</span> pe.fn.init (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">2063</span>)</span><br><span class="line">    at pe (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1377</span>)</span><br><span class="line">    at H.render (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">4722</span>)</span><br><span class="line">    at <span class="keyword">new</span> H (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">4706</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.d.render (layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">5048</span>)</span><br><span class="line">t.error @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1807</span></span><br><span class="line">t.tokenize @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1989</span></span><br><span class="line">t.select @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1998</span></span><br><span class="line">t @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1514</span></span><br><span class="line">find @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">2049</span></span><br><span class="line">pe.fn.init @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">2063</span></span><br><span class="line">pe @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">1377</span></span><br><span class="line">H.render @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">4722</span></span><br><span class="line">H @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">4706</span></span><br><span class="line">d.render @ layui.all.js?v=<span class="number">1.1</span><span class="number">.1</span>:<span class="number">5048</span></span><br><span class="line">listRegistration @ sign_regisrationCountList.js?v=<span class="number">1.1</span><span class="number">.3</span>:<span class="number">21</span></span><br><span class="line">onclick @ sign_regisrationCountList.jsp?<span class="number">1</span>=<span class="number">1</span>&amp;loginMenuId=<span class="number">01</span>ffadb7<span class="number">-0</span>a28<span class="number">-4</span>f89<span class="number">-9</span>c6d-aadf1dcf3934:<span class="number">91</span></span><br></pre></td></tr></table></figure><h1 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">        height:<span class="string">'400'</span></span><br><span class="line">        ,<span class="attr">elem</span>: <span class="string">'#registration'</span></span><br><span class="line">        ,<span class="attr">cols</span>: [</span><br><span class="line">            <span class="comment">//一级表头</span></span><br><span class="line">            [</span><br><span class="line">            &#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'myIndex'</span>,<span class="attr">title</span>: <span class="string">'序号'</span>,<span class="attr">width</span>: <span class="number">60</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'patientName'</span>, <span class="attr">title</span>: <span class="string">'姓名'</span>, <span class="attr">width</span>: <span class="number">60</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'patientGender'</span>, <span class="attr">title</span>: <span class="string">'性别'</span>, <span class="attr">width</span>: <span class="number">60</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'patientIdNo'</span>, <span class="attr">title</span>: <span class="string">'身份证'</span>, <span class="attr">width</span>: <span class="number">180</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>:<span class="string">'signNum'</span>, <span class="attr">title</span>: <span class="string">'签约编码'</span>, <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'patientTel'</span>, <span class="attr">title</span>: <span class="string">'联系电话'</span>, <span class="attr">width</span>: <span class="number">120</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">title</span>: <span class="string">'签约家庭类别'</span>, <span class="attr">colspan</span>:<span class="number">7</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">title</span>: <span class="string">'重点人群签约服务项目数'</span>, <span class="attr">colspan</span>:<span class="number">7</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">title</span>: <span class="string">'其他人群'</span>, <span class="attr">colspan</span>:<span class="number">5</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'serpkName'</span>, <span class="attr">title</span>: <span class="string">'签约服务包类型'</span>, <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ,&#123;<span class="attr">rowspan</span>: <span class="number">2</span>,<span class="attr">field</span>: <span class="string">'remark'</span>, <span class="attr">title</span>: <span class="string">'备注'</span>, <span class="attr">width</span>: <span class="number">80</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">            <span class="comment">//二级表头</span></span><br><span class="line">            ,[</span><br><span class="line">                <span class="comment">//签约家庭类别</span></span><br><span class="line">                &#123;<span class="attr">field</span>:<span class="string">'disabilitiesInFamily'</span>, <span class="attr">title</span>: <span class="string">'计生失独伤残家庭'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'familyOnlyChild'</span>, <span class="attr">title</span>: <span class="string">'计生独生子女'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'familyPlanningTwoWomen'</span>, <span class="attr">title</span>: <span class="string">'计生双女'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'fiveInsuredHouseholds'</span>, <span class="attr">title</span>: <span class="string">'五保户'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'lowInsuredHouseholds'</span>, <span class="attr">title</span>: <span class="string">'低保户'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'fileCardPoor'</span>, <span class="attr">title</span>: <span class="string">'建档立卡贫困人口'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'hsOther'</span>, <span class="attr">title</span>: <span class="string">'其他'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                <span class="comment">//重点人群签约服务项目数</span></span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'elderly'</span>, <span class="attr">title</span>: <span class="string">'老年人'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'patientsWithHypertension'</span>, <span class="attr">title</span>: <span class="string">'高血压患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'typeTwoDiabetes'</span>, <span class="attr">title</span>: <span class="string">'2型糖尿病患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'patientsWithMentalDisorders'</span>, <span class="attr">title</span>: <span class="string">'严重精神障碍患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'tuberculosisPatients'</span>, <span class="attr">title</span>: <span class="string">'结核病患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'maternal'</span>, <span class="attr">title</span>: <span class="string">'孕产妇'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'childernAgedZeroToSix'</span>, <span class="attr">title</span>: <span class="string">'0-6岁儿童'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                <span class="comment">//其他人群</span></span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'disabled'</span>, <span class="attr">title</span>: <span class="string">'残疾人'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'patientsWithCereBrovascularDisease'</span>, <span class="attr">title</span>: <span class="string">'脑血管病患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'coronaryHeartDiseasePatients'</span>, <span class="attr">title</span>: <span class="string">'冠心病患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'cancerPatients'</span>, <span class="attr">title</span>: <span class="string">'癌症患者'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">                ,&#123;<span class="attr">field</span>:<span class="string">'others'</span>, <span class="attr">title</span>: <span class="string">'其他'</span>, <span class="attr">width</span>: <span class="number">70</span>, <span class="attr">align</span>: <span class="string">"center"</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">        ,<span class="attr">id</span>: <span class="string">'registration'</span></span><br><span class="line">        ,<span class="attr">url</span>: <span class="string">'statisticalReportsAction.action'</span></span><br><span class="line">        ,<span class="attr">where</span>: &#123;<span class="attr">act</span>: <span class="string">'registrationStatisticalList'</span>,<span class="attr">strJson</span>:<span class="built_in">JSON</span>.stringify(qvo)&#125;</span><br><span class="line">        ,<span class="attr">method</span>: <span class="string">'post'</span></span><br><span class="line">        ,<span class="attr">skin</span>: <span class="string">'row'</span> <span class="comment">//表格风格</span></span><br><span class="line">        ,<span class="attr">even</span>: <span class="literal">true</span></span><br><span class="line">        ,<span class="attr">page</span>: <span class="literal">true</span> <span class="comment">//是否显示分页</span></span><br><span class="line">        ,<span class="attr">limits</span>: [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>]</span><br><span class="line">        ,<span class="attr">limit</span>: <span class="number">10</span> <span class="comment">//每页默认显示的数量</span></span><br><span class="line">        ,<span class="attr">done</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res, curr, count</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (res.data != <span class="literal">null</span>) &#123;</span><br><span class="line">                vos = res.data;</span><br><span class="line">                numberCount = res.data.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// //遮罩关闭</span></span><br><span class="line">            <span class="comment">// layer.close(index);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Note" scheme="https://github.com/yibinliao/yibinliao.github/categories/Note/"/>
    
    
      <category term="note" scheme="https://github.com/yibinliao/yibinliao.github/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Markdown代码块语法的血泪史</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/18/2019-12-18-note-1/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/18/2019-12-18-note-1/</id>
    <published>2019-12-18T06:24:43.802Z</published>
    <updated>2019-12-18T07:45:16.374Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><blockquote><p>前言：Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 </p></blockquote><h1 id="1、“-”语法的说明"><a href="#1、“-”语法的说明" class="headerlink" title="1、“```”语法的说明"></a>1、“```”语法的说明</h1><p>&emsp;&emsp;关于 ``` 语法的作用相信都知道吧，就是声明一块空间用于代码使用的。但是呢我这小白刚使用Markdown语法时，踩到的坑真的是要我飙血三升啊╮(╯﹏╰）╭为什么这么说嘞，下面让我来一一陈述吧。 </p><h1 id="2、“血泪史”啊"><a href="#2、“血泪史”啊" class="headerlink" title="2、“血泪史”啊"></a>2、“血泪史”啊</h1><p>&emsp;&emsp;刚一开始我是使用Markdownpad2来写md文章的，因为比较简洁看着舒服，在我写博客的时候贴了些代码用于陈述所说观点，所以使用到了 ``` 语法。话不多说问题如下： </p><h2 id="2-1、关于“-”和“-”的区别及异常"><a href="#2-1、关于“-”和“-”的区别及异常" class="headerlink" title="2.1、关于“```”和“~”的区别及异常"></a>2.1、关于“```”和“<del>~</del>”的区别及异常</h2><p>&emsp;&emsp;两个标签的实现效果是一样的，如图所示： </p><p><img src="https://liaoyibin.vip/images/2019-12-18-note-1-01.png" alt="image">  </p><h3 id="异常："><a href="#异常：" class="headerlink" title="异常："></a>异常：</h3><ul><li>1、“<del>~</del>”无法标记代码块内的语言类型，“```”可以标记 </li><li>2、“<del>~</del>”无法结束代码块语法的声明 </li></ul><p>暂时是只发现了这两个异常，另外个人建议写md文档不推荐使用Markdownpad2编辑器，感觉太多坑了。我主要用它也是用来写博客的，不清楚是不是因为版本的原因 </p><h2 id="2-2、“-”使用注意"><a href="#2-2、“-”使用注意" class="headerlink" title="2.2、“```”使用注意"></a>2.2、“```”使用注意</h2><p>&emsp;&emsp;在使用该语法时<span style="color:red;">开头之前必须要有一行空行</span>，若要标记语言则在<span style="color:red;">开头语法加一个空格然后声明语言类型(具体如图所示)</span>，既然开头有要求自然结束也有要求的。<span style="color:red;">结束时切忌不要在结束标签后加空格，否则该标签未关闭。关闭则直接回车换两行即可</span>。这就是让我痛不欲生错误啊，该问题在编译器里是看不出异常的，编译器里预览效果都是正常的包括直接用浏览器预览也是正常的，但实际并不是这样的，当你生成hexo博客后就会发现异常。下面带图说话：<br>&emsp;&emsp;使用注意： </p><blockquote><p>标记语言只是让代码高亮 </p></blockquote><p><img src="https://liaoyibin.vip/images/2019-12-18-note-1-03.png" alt="image">  </p><p>若格式不是这样的效果则是这样，如图所示： </p><p><img src="https://liaoyibin.vip/images/2019-12-18-note-1-02.png" alt="image">  </p><p>上图可见不是这种写法则代码块声明无法关闭，则后续所有标签都不生效直接进入了代码块空间内。 </p><p>踩得坑呢就这些，但是那个关闭标签是真的我超头疼，还好发现了，特地记下分享分享。O(∩_∩)O哈哈~当然要是各位大佬有其他意见或者看法一定得告诉我，好让我快点追上大佬的脚本☆￣(＞。☆) </p><hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Note" scheme="https://github.com/yibinliao/yibinliao.github/categories/Note/"/>
    
    
      <category term="note" scheme="https://github.com/yibinliao/yibinliao.github/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Spring相关的6个注解探寻路</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-2/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-2/</id>
    <published>2019-12-12T06:18:44.683Z</published>
    <updated>2019-12-18T06:25:18.161Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><blockquote><p>在这里梳理了在项目中与Spring Boot注解配合最为紧密的6个Spring基础框架的注解。如👇  </p></blockquote><h1 id="1、-Configuration"><a href="#1、-Configuration" class="headerlink" title="1、@Configuration"></a>1、@Configuration</h1><p>&emsp;&emsp;从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。  </p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"biz-electrfence-controller"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BizElectrfenceControllerJob <span class="title">bizElectrfenceControllerJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BizElectrfenceControllerJob();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"biz-consume-1-datasync"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BizBikeElectrFenceTradeSyncJob <span class="title">bizBikeElectrFenceTradeSyncJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BizBikeElectrFenceTradeSyncJob();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、-ComponentScan"><a href="#2、-ComponentScan" class="headerlink" title="2、@ComponentScan"></a>2、@ComponentScan</h1><p>&emsp;&emsp;做过web开发的同学一定都有用过@Controller，@Service，@Repository注解，查看其源码你会发现，他们中有一个共同的注解@Component，没错@ComponentScan注解默认就会装配标识了@Controller，@Service，@Repository，@Component注解的类到spring容器中。  </p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.abacus.check.api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckApiApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CheckApiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@SpringBootApplication注解也包含了@ComponentScan注解，所以在使用中我们也可以通过<br>@SpringBootApplication注解的scanBasePackages属性进行配置。  </p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages =  &#123;</span><br><span class="line">    <span class="string">"com.abacus.check.api"</span>, <span class="string">"com.abacus.check.service"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckApiApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CheckApiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、-Conditional"><a href="#3、-Conditional" class="headerlink" title="3、@Conditional"></a>3、@Conditional</h1><p>&emsp;&emsp;@Conditional是Spring4新提供的注解，通过@Conditional注解可以根据代码中设置的条件装载不同的bean，在设置条件注解之前，先要把装载的bean类去实现Condition接口，然后对该实现接口的类设置是否装载的条件。Spring Boot注解中的@ConditionalOnProperty、@ConditionalOnBean等以@Conditional*开头的注解，都是通过集成了@Conditional来实现相应功能的。  </p><h4 id="Conditional的定义："><a href="#Conditional的定义：" class="headerlink" title="@Conditional的定义："></a>@Conditional的定义：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此注解可以标注在类和方法上</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,</span><br><span class="line">    ElementType.METHOD</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line">    Class&lt;?extends Condition&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从代码中可以看到，需要传入一个Class数组，并且需要继承Condition接口：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext var1, AnnotatedTypeMetadata var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Condition是个接口，需要实现matches方法，返回true则注入bean，false则不注入。  </p></blockquote><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><blockquote><p>首先，创建Person类：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建BeanConfig类，用于配置两个Person实例并注入，一个是比尔盖茨，一个是林纳斯。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"linus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Linus"</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接着写一个测试类进行验证这两个Bean是否注入成功。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionalTest</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(BeanConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Person&gt; map = applicationContext.getBeansOfType(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行，输出结果是这样的，两个Person实例被注入进容器。运行，输出结果是这样的，两个Person实例被注入进容器。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;bill=Person&#123;name=<span class="string">'Bill Gates'</span>,age=<span class="number">62</span>&#125;,linus=Person=&#123;name=<span class="string">'Linus'</span>,age=<span class="number">48</span>&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是一个简单的例子，现在问题来了，如果我想根据当前操作系统来注入Person实例，windows下注入bill，linux下注入linus，怎么实现呢？</p><p>这就需要我们用到@Conditional注解了，前言中提到，需要实现Condition接口，并重写方法来自定义match规则。  </p></blockquote><blockquote><p>首先，创建一个WindowsCondition类：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conditionContext:判断条件能使用的上下文环境</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotatedTypeMetadata:注解所在位置的注释信息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext,</span></span></span><br><span class="line"><span class="function"><span class="params">        AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ioc使用的beanFactory</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = conditionContext.getBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类加载器</span></span><br><span class="line">        ClassLoader classLoader = conditionContext.getClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前环境信息</span></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取bean定义的注册类</span></span><br><span class="line">        BeanDefinitionRegistry registry = conditionContext.getRegistry();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得当前系统名</span></span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包含Windows则说明是windows系统，返回true</span></span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">"Windows"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>matches方法的两个参数的意思在注释中讲述了，值得一提的是，conditionContext提供了多种方法，方便获取各种信息，也是SpringBoot中 @ConditonalOnXX注解多样扩展的基础。</p><p>接着，创建LinuxCondition类：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext,</span></span></span><br><span class="line"><span class="function"><span class="params">        AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line"></span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">"Linux"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就是使用这两个类了，因为此注解可以标注在方法上和类上，所以分开测试：  </p><h4 id="标注在方法上："><a href="#标注在方法上：" class="headerlink" title="标注在方法上："></a>标注在方法上：</h4><p>修改BeanConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//只有一个类时，大括号可以省略</span></span><br><span class="line">    <span class="comment">//如果WindowsCondition的实现方法返回true，则注入这个bean    </span></span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;WindowsCondition<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line"><span class="class">    @<span class="title">Bean</span>(<span class="title">name</span> </span>= <span class="string">"bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果LinuxCondition的实现方法返回true，则注入这个bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;LinuxCondition<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line">    @Bean("linus")</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Linus"</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改测试方法，使其可以打印当前系统名：运行结果如下：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前系统为：Windows <span class="number">10</span></span><br><span class="line">&#123;bill=Person&#123;name=<span class="string">'Bill Gates'</span>,age=<span class="number">62</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>接着测试在Linux系统，由于是Windows系统所以直接修改运行参数：<br><img src="https://liaoyibin.vip/images/2019-12-12-note-002-1.png" alt="image">  </p><blockquote><p>修改参数  </p></blockquote><p>VM option:    -Dos.name=Linux  </p><blockquote><p>修改后启动测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前系统为：Linux</span><br><span class="line">&#123;linus=Person=&#123;name=<span class="string">'Linus'</span>,age=<span class="number">48</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red"> 一个方法只能注入一个bean实例，所以@Conditional标注在方法上只能控制一个bean实例是否注入。</span>  </p><h4 id="标注在类上："><a href="#标注在类上：" class="headerlink" title="标注在类上："></a>标注在类上：</h4><p>&emsp;&emsp;<span style="color:red">一个类中可以注入很多实例，@Conditional标注在类上就决定了一批bean是否注入。</span><br>我们试一下，将BeanConfig改写，这时，如果WindowsCondition返回true，则两个Person实例将被注入(注意：上一个测试将os.name改为linux，这是我将把这个参数去掉)：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditional</span>(&#123;WindowsCondition<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"linus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Linus"</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果两个实例都被注入：   </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;bill=Person=&#123;name=<span class="string">'Bill Gates'</span>,age=<span class="number">62</span>&#125;,linus=Person=&#123;name=<span class="string">'Linus'</span>,age=<span class="number">48</span>&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果将类上的WindowsCondition.class改为LinuxCondition.class，结果应该可以猜到：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果就是空的，类中所有bean都没有注入。  </p></blockquote><h3 id="多个条件类："><a href="#多个条件类：" class="headerlink" title="多个条件类："></a>多个条件类：</h3><p>&emsp;&emsp;前言中说，@Conditional注解传入的是一个Class数组，存在多种条件类的情况。<br>这种情况貌似判断难度加深了，测试一波，新增新的条件类，实现的matches返回false（这种写死返回false的方法纯属测试用，没有实际意义O(∩_∩)O）  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObstinateCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext,</span></span></span><br><span class="line"><span class="function"><span class="params">        AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BeanConfig修改一下：  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Conditional</span>(&#123;WindowsCondition<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ObstinateCondition</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"bill"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"linus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Linus"</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论得:  </p></blockquote><pre><code>第一个条件类实现的方法返回true，第二个返回false，则结果false，不注入进容器。  第一个条件类实现的方法返回true，第二个返回true，则结果true，注入进容器中。  </code></pre><h1 id="4、-Import"><a href="#4、-Import" class="headerlink" title="4、@Import"></a>4、@Import</h1><p>&emsp;&emsp;通过导入的方式实现把实例加入springIOC容器中。可以在需要时将没有被Spring容器管理的类导入至Spring容器中。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circular</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Square<span class="class">.<span class="keyword">class</span>,<span class="title">Circular</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MainConfig</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="5、-ImportResource"><a href="#5、-ImportResource" class="headerlink" title="5、@ImportResource"></a>5、@ImportResource</h1><p>&emsp;&emsp;和@Import类似，区别就是@ImportResource导入的是配置文件。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:spring-redis.xml"</span>) <span class="comment">//导入xml配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckApiApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CheckApiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6、-Component"><a href="#6、-Component" class="headerlink" title="6、@Component"></a>6、@Component</h1><p>&emsp;&emsp;@Component是一个元注解，意思是可以注解其他类注解，如@Controller @Service @Repository。带此注解的类被看作组件，当使用基于注解的配置和类路径扫描的时候，这些类就会被实例化。其他类级别的注解也可以被认定为是一种特殊类型的组件，比如@Controller 控制器（注入服务）、@Service服务（注入dao）、@Repository dao（实现dao访问）。@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注，作用就相当于 XML配置，<bean id class>。  </bean></p><hr>  <h1 id="Spring-Boot最核心的20个注解"><a href="#Spring-Boot最核心的20个注解" class="headerlink" title="Spring Boot最核心的20个注解  "></a>Spring Boot最核心的20个注解  </h1><h1 id="1、-SpringBootApplication"><a href="#1、-SpringBootApplication" class="headerlink" title="1、@SpringBootApplication"></a>1、@SpringBootApplication</h1><p>&emsp;&emsp;这个注解是Spring Boot最核心的注解，用在 Spring Boot的主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力。实际上这个注解是@Configuration,@EnableAutoConfiguration,@ComponentScan三个注解的组合。由于这些注解一般都是一起使用，所以Spring Boot提供了一个统一的注解@SpringBootApplication。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude =  &#123;</span><br><span class="line">    MongoAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">MongoDataAutoConfiguration</span>.<span class="title">class</span>, <span class="title">DataSourceAutoConfiguration</span>.<span class="title">class</span>, <span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span>, <span class="title">MybatisAutoConfiguration</span>.<span class="title">class</span>, <span class="title">MailSenderAutoConfiguration</span>.<span class="title">class</span>, &#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">API</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(API<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、-EnableAutoConfiguration"><a href="#2、-EnableAutoConfiguration" class="headerlink" title="2、@EnableAutoConfiguration"></a>2、@EnableAutoConfiguration</h1><p>&emsp;&emsp;允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。如：当前类路径下有 Mybatis 这个 JAR 包，MybatisAutoConfiguration 注解就能根据相关参数来配置 Mybatis 的各个 Spring Bean。<br>&emsp;&emsp;@EnableAutoConfiguration实现的关键在于引入了AutoConfigurationImportSelector，其核心逻辑为selectImports方法，逻辑大致如下：  </p><ul><li>从配置文件META-INF/spring.factories加载所有可能用到的自动配置类；</li><li>去重，并将exclude和excludeName属性携带的类排除；  </li><li>过滤，将满足条件（@Conditional）的自动配置类返回；  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span> <span class="comment">//导入AutoConfigurationImportSelector的子类@Import(&#123;EnableAutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span></span><br><span class="line">    ;</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span>  &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span>  &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、-SpringBootConfiguration"><a href="#3、-SpringBootConfiguration" class="headerlink" title="3、@SpringBootConfiguration"></a>3、@SpringBootConfiguration</h1><p>&emsp;&emsp;这个注解就是 @Configuration 注解的变体，只是用来修饰是 Spring Boot 配置而已，或者可利于 Spring Boot 后续的扩展。  </p><h1 id="4、-ConditionalOnBean"><a href="#4、-ConditionalOnBean" class="headerlink" title="4、@ConditionalOnBean"></a>4、@ConditionalOnBean</h1><p>&emsp;&emsp;@ConditionalOnBean(A.class)仅仅在当前上下文中存在A对象时，才会实例化一个Bean，也就是说只有当A.class 在spring的applicationContext中存在时，这个当前的bean才能够创建。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//当前环境上下文存在DefaultMQProducer实例时，才能创建RocketMQProducerLifecycle这个Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(DefaultMQProducer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">RocketMQProducerLifecycle</span> <span class="title">rocketMQLifecycle</span>() </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> RocketMQProducerLifecycle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、-ConditionalOnMissingBean"><a href="#5、-ConditionalOnMissingBean" class="headerlink" title="5、@ConditionalOnMissingBean"></a>5、@ConditionalOnMissingBean</h1><blockquote><p>组合@Conditional注解，和@ConditionalOnBean注解相反，仅仅在当前上下文中不存在A对象时，才会实例化一个Bean。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="comment">//仅当当前环境上下文缺失RocketMQProducer对象时，才允许创建RocketMQProducer Bean对象</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span>(RocketMQProducer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">RocketMQProducer</span> <span class="title">mqProducer</span>() </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RocketMQProducer();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="6、-ConditionalOnClass"><a href="#6、-ConditionalOnClass" class="headerlink" title="6、@ConditionalOnClass"></a>6、@ConditionalOnClass</h1><blockquote><p>组合 @Conditional 注解，可以仅当某些类存在于classpath上时候才创建某个Bean。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"> <span class="comment">//当classpath中存在类HealthIndicator时，才创建HealthIndicator Bean对象</span></span><br><span class="line"> <span class="meta">@ConditionalOnClass</span>(HealthIndicator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> <span class="title">public</span> <span class="title">HealthIndicator</span> <span class="title">rocketMQProducerHealthIndicator</span>(<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">DefaultMQProducer</span>&gt; <span class="title">producers</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (producers.size() == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> RocketMQProducerHealthIndicator(producers.values().iterator().next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="7、-ConditionalOnMissingClass"><a href="#7、-ConditionalOnMissingClass" class="headerlink" title="7、@ConditionalOnMissingClass"></a>7、@ConditionalOnMissingClass</h1><p>&emsp;&emsp;组合@Conditional注解，和@ConditionalOnMissingClass注解相反，当classpath中没有指定的 Class才开启配置。  </p><h1 id="8、-ConditionalOnWebApplication"><a href="#8、-ConditionalOnWebApplication" class="headerlink" title="8、@ConditionalOnWebApplication"></a>8、@ConditionalOnWebApplication</h1><p>&emsp;&emsp;组合@Conditional 注解，当前项目类型是 WEB 项目才开启配置。当前项目有以下 3 种类型:ANY(任何Web项目都匹配)、SERVLET（仅但基础的Servelet项目才会匹配）、REACTIVE（只有基于响应的web应用程序才匹配）。  </p><h1 id="9、-ConditionalOnNotWebApplication"><a href="#9、-ConditionalOnNotWebApplication" class="headerlink" title="9、@ConditionalOnNotWebApplication"></a>9、@ConditionalOnNotWebApplication</h1><p>&emsp;&emsp;组合@Conditional注解，和@ConditionalOnWebApplication 注解相反，当前项目类型不是 WEB 项目才开启配置。  </p><h1 id="10、-ConditionalOnProperty"><a href="#10、-ConditionalOnProperty" class="headerlink" title="10、@ConditionalOnProperty"></a>10、@ConditionalOnProperty</h1><p>&emsp;&emsp;组合 @Conditional 注解，当指定的属性有指定的值时才开启配置。具体操作是通过其两个属性name以及havingValue来实现的，其中name用来从application.properties中读取某个属性值，如果该值为空，则返回false;如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。如果返回值为false，则该configuration不生效；为true则生效。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//匹配属性rocketmq.producer.enabled值是否为true</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"rocketmq.producer.enabled"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RocketMQProducer <span class="title">mqProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RocketMQProducer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11、-ConditionalOnExpression"><a href="#11、-ConditionalOnExpression" class="headerlink" title="11、@ConditionalOnExpression"></a>11、@ConditionalOnExpression</h1><blockquote><p>组合 @Conditional 注解，当 SpEL 表达式为 true 时才开启配置。  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"$&#123;enabled:false&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigpipeConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderMessageMonitor <span class="title">orderMessageMonitor</span><span class="params">(ConfigContext configContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderMessageMonitor(configContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12、-ConditionalOnJava"><a href="#12、-ConditionalOnJava" class="headerlink" title="12、@ConditionalOnJava"></a>12、@ConditionalOnJava</h1><p>&emsp;&emsp;组合@Conditional 注解，当运行的 Java JVM 在指定的版本范围时才开启配置。  </p><h1 id="13、-ConditionalOnResource"><a href="#13、-ConditionalOnResource" class="headerlink" title="13、@ConditionalOnResource"></a>13、@ConditionalOnResource</h1><p>&emsp;&emsp;组合 @Conditional 注解，当类路径下有指定的资源才开启配置  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnResource</span>(resources=<span class="string">"classpath:shiro.ini"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> Realm <span class="title">iniClasspathRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Realm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14、-ConditionalOnJndi"><a href="#14、-ConditionalOnJndi" class="headerlink" title="14、@ConditionalOnJndi"></a>14、@ConditionalOnJndi</h1><p>&emsp;&emsp;组合 @Conditional 注解，当指定的 JNDI 存在时才开启配置。  </p><h1 id="15、-ConditionalOnCloudPlatform"><a href="#15、-ConditionalOnCloudPlatform" class="headerlink" title="15、@ConditionalOnCloudPlatform"></a>15、@ConditionalOnCloudPlatform</h1><p>&emsp;&emsp;组合 @Conditional 注解，当指定的云平台激活时才开启配置。  </p><h1 id="16、-ConditionalOnSingleCandidate"><a href="#16、-ConditionalOnSingleCandidate" class="headerlink" title="16、@ConditionalOnSingleCandidate"></a>16、@ConditionalOnSingleCandidate</h1><p>&emsp;&emsp;组合 @Conditional 注解，当指定的 class 在容器中只有一个 Bean，或者同时有多个但为首选时才开启配置。  </p><h1 id="17、-ConfigurationProperties"><a href="#17、-ConfigurationProperties" class="headerlink" title="17、@ConfigurationProperties"></a>17、@ConfigurationProperties</h1><p>&emsp;&emsp;Spring Boot可使用注解的方式将自定义的properties文件映射到实体bean中，比如config.properties文件。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"rocketmq.consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RocketMQConsumerProperties</span> <span class="keyword">extends</span> <span class="title">RocketMQProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consumerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageModel messageModel = MessageModel.CLUSTERING;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> consumeThreadMin = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> consumeThreadMax = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> consumeConcurrentlyMaxSpan = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pullThresholdForQueue = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pullInterval = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> consumeMessageBatchMaxSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pullBatchSize = <span class="number">32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18、-EnableConfigurationProperties"><a href="#18、-EnableConfigurationProperties" class="headerlink" title="18、@EnableConfigurationProperties"></a>18、@EnableConfigurationProperties</h1><p>&emsp;&emsp;当@EnableConfigurationProperties注解应用到你的@Configuration时，任何被@ConfigurationProperties注解的beans将自动被Environment属性配置。 这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;</span><br><span class="line">    RocketMQProducerProperties<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">RocketMQConsumerProperties</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RocketMQAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="19、-AutoConfigureAfter"><a href="#19、-AutoConfigureAfter" class="headerlink" title="19、@AutoConfigureAfter"></a>19、@AutoConfigureAfter</h1><p>&emsp;&emsp;用在自动配置类上面，表示该自动配置类需要在另外指定的自动配置类配置完之后。<br>如 Mybatis 的自动配置类，需要在数据源自动配置类之后。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureAfter</span>(DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MybatisAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="20、-AutoConfigureBefore"><a href="#20、-AutoConfigureBefore" class="headerlink" title="20、@AutoConfigureBefore"></a>20、@AutoConfigureBefore</h1><p>&emsp;&emsp;这个和@AutoConfigureAfter注解使用相反，表示该自动配置类需要在另外指定的自动配置类配置之前。  </p><h1 id="21、-AutoConfigureOrder"><a href="#21、-AutoConfigureOrder" class="headerlink" title="21、@AutoConfigureOrder"></a>21、@AutoConfigureOrder</h1><p>&emsp;&emsp;Spring Boot 1.3.0中有一个新的注解@AutoConfigureOrder，用于确定配置加载的优先级顺序。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE) <span class="comment">// 自动配置里面的最高优先级</span></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnWebApplication</span> <span class="comment">// 仅限于web应用</span></span><br><span class="line">  <span class="meta">@Import</span>(BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>) // 导入内置容器的设置</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Configuration</span></span><br><span class="line">      <span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">      @<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line">         <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Configuration</span></span><br><span class="line">      <span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Server</span>.<span class="title">class</span>, <span class="title">Loader</span>.<span class="title">class</span>, <span class="title">WebAppContext</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">      @<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= EmbeddedServletContainerFactory<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line">         <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Note" scheme="https://github.com/yibinliao/yibinliao.github/categories/Note/"/>
    
    
      <category term="note" scheme="https://github.com/yibinliao/yibinliao.github/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>WebFilter注解的了解</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-1/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-1/</id>
    <published>2019-12-12T06:18:44.681Z</published>
    <updated>2019-12-18T06:15:54.615Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><h1 id="一、-WebFilter详细说明"><a href="#一、-WebFilter详细说明" class="headerlink" title="一、@WebFilter详细说明"></a>一、@WebFilter详细说明</h1><h2 id="WebFilter"><a href="#WebFilter" class="headerlink" title="@WebFilter"></a>@WebFilter</h2><p> &emsp;&emsp;@WebFilter 用于将一个类声明为==过滤器==，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为过滤器。该注解具有下表给出的一些常用属性 ( 以下所有属性均为可选属性，但是 value、urlPatterns、servletNames 三者必需至少包含一个，且 value 和 urlPatterns 不能共存，如果同时指定，通常忽略 value 的取值 )<br><br>  </p><h2 id="WebFilter-的常用属性"><a href="#WebFilter-的常用属性" class="headerlink" title="@WebFilter 的常用属性"></a>@WebFilter 的常用属性</h2><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">filterName</td><td align="left">String</td><td align="left">指定过滤器的 name 属性，等价于<filter-name></filter-name></td></tr><tr><td align="left">value</td><td align="left">String[]</td><td align="left">该属性等价于 urlPatterns 属性。但是两者不应该同事使用</td></tr><tr><td align="left">urlPatterns</td><td align="left">String[]</td><td align="left">指定一组过滤器的URL匹配模式。等价于 <url-patterns>标签</url-patterns></td></tr><tr><td align="left">servletNames</td><td align="left">String[]</td><td align="left">指定过滤器将应用于哪些 servlet。取值是@webServlet中的name属性的取值，或者是web.xml中 <servlet-name> 取值</servlet-name></td></tr><tr><td align="left">dispatcherTypers</td><td align="left">DispatcherType</td><td align="left">指定过滤器的转发模式，具体取值包括：ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td></tr><tr><td align="left">initParams</td><td align="left">WebInitParam[]</td><td align="left">指定一组过滤器初始化参数，等价于 <init-param> 标签</init-param></td></tr><tr><td align="left">asyncSupported</td><td align="left">boolean</td><td align="left">声明过滤器是否支持异步操作模式，等价于 <async-supported> 标签</async-supported></td></tr><tr><td align="left">description</td><td align="left">String</td><td align="left">该过滤器的描述信息，等价于 <description> 标签</description></td></tr><tr><td align="left">displayName</td><td align="left">String</td><td align="left">该过滤器的显示名，通常配合工具使用，等价于 <display-name> 标签</display-name></td></tr></tbody></table><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xc.common.filter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="comment">/** * <span class="doctag">@ClassName</span>: FilterDemo01 </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>:filter的三种典型应用： </span></span><br><span class="line"><span class="comment">  *          1、可以在filter中根据条件决定是否调用chain.doFilter(request, response)方法， 即是否让目标资源执行&lt;br/&gt; </span></span><br><span class="line"><span class="comment">  *          2、在让目标资源执行之前，可以对request\response作预处理，再让目标资源执行 &lt;br/&gt; </span></span><br><span class="line"><span class="comment">  *          3、在目标资源执行之后，可以捕获目标资源的执行结果，从而实现一些特殊的功能 &lt;br/&gt; </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@WebFilter</span>(filterName = <span class="string">"FilterDemo01"</span>, urlPatterns = &#123; <span class="string">"/*"</span> &#125;)</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo01</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;    </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;        </span><br><span class="line">System.out.println(<span class="string">"----FilterDemo01过滤器初始化----"</span>);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 对request和response进行一些预处理        </span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);        </span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);        </span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);        </span><br><span class="line">System.out.println(<span class="string">"FilterDemo01执行前！！！"</span>);        </span><br><span class="line">chain.doFilter(request, response); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 让目标资源执行，放行        </span></span><br><span class="line">System.out.println(<span class="string">"FilterDemo01执行后！！！"</span>);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">System.out.println(<span class="string">"----过滤器销毁----"</span>);    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h2><h3 id="Filter的创建"><a href="#Filter的创建" class="headerlink" title="Filter的创建"></a>Filter的创建</h3><p>&emsp;&emsp;Filter的创建和销毁由WEB服务器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作，filter对象只会创建一次，init方法也只会执行一次。通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。  </p><h3 id="Filter的销毁"><a href="#Filter的销毁" class="headerlink" title="Filter的销毁"></a>Filter的销毁</h3><p>&emsp;&emsp;Web容器调用destroy方法销毁Filter。destroy方法在Filter的生命周期中仅执行一次。在destroy方法中，可以释放过滤器使用的资源。  </p><h3 id="FilterConfig接口"><a href="#FilterConfig接口" class="headerlink" title="FilterConfig接口"></a>FilterConfig接口</h3><p>&emsp;&emsp;用户在配置filter时，可以使用为filter配置一些初始化参数，当web容器实例化Filter对象，调用其init方法时，会把封装了filter初始化参数的filterConfig对象传递进来。因此开发人员在编写filter时，通过filterConfig对象的方法，就可获得：  </p><ul><li><p>String getFilterName()：得到filter的名称。  </p></li><li><p>String getInitParameter(String name)： 返回在部署描述中指定名称的初始化参数的值。如果不存在返回null.  </p></li><li><p>Enumeration getInitParameterNames()：返回过滤器的所有初始化参数的名字的枚举集合。  </p></li><li><p>public ServletContext getServletContext()：返回Servlet上下文对象的引用。  </p></li></ul><h3 id="范例：利用FilterConfig得到filter配置信息"><a href="#范例：利用FilterConfig得到filter配置信息" class="headerlink" title="范例：利用FilterConfig得到filter配置信息"></a>范例：利用FilterConfig得到filter配置信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xc.common.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FilterDemo02"</span>, urlPatterns =  &#123;</span><br><span class="line">    <span class="string">"/*"</span>&#125;</span><br><span class="line">, initParams =  &#123;</span><br><span class="line">    <span class="meta">@WebInitParam</span>(name = <span class="string">"name"</span>, value = <span class="string">"xc"</span>)</span><br><span class="line">    , <span class="meta">@WebInitParam</span>(name = <span class="string">"like"</span>, value = <span class="string">"java"</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo02</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 过滤器初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----FilterDemo02过滤器初始化----"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到过滤器的名字        </span></span><br><span class="line">        String filterName = filterConfig.getFilterName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到在web.xml文件中配置的初始化参数        </span></span><br><span class="line">        String initParam1 = filterConfig.getInitParameter(<span class="string">"name"</span>);</span><br><span class="line">        String initParam2 = filterConfig.getInitParameter(<span class="string">"like"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回过滤器的所有初始化参数的名字的枚举集合。        </span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = filterConfig.getInitParameterNames();</span><br><span class="line">        System.out.println(filterName);</span><br><span class="line">        System.out.println(initParam1);</span><br><span class="line">        System.out.println(initParam2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements()) &#123;</span><br><span class="line">            String paramName = (String) initParameterNames.nextElement();</span><br><span class="line">            System.out.println(paramName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo02执行前！！！"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        <span class="comment">// 让目标资源执行，放行        </span></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo02执行后！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----过滤器销毁----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Note" scheme="https://github.com/yibinliao/yibinliao.github/categories/Note/"/>
    
    
      <category term="note" scheme="https://github.com/yibinliao/yibinliao.github/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>关于Oracle的Merge的用法</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-4/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-4/</id>
    <published>2019-12-12T06:18:44.673Z</published>
    <updated>2019-12-18T06:20:06.025Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><blockquote><p>话不多说直接记录！(^_−)☆  </p></blockquote><h3 id="自动判断是新增还是修改的关键字："><a href="#自动判断是新增还是修改的关键字：" class="headerlink" title="自动判断是新增还是修改的关键字："></a>自动判断是新增还是修改的关键字：</h3><blockquote><p>MERGE INTO   </p></blockquote><p>MERGE 语法： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> [your <span class="keyword">table</span>-<span class="keyword">name</span>] [<span class="keyword">rename</span> your <span class="keyword">table</span> here] </span><br><span class="line"><span class="keyword">USING</span> ( [write your <span class="keyword">query</span> here] )[<span class="keyword">rename</span> your <span class="keyword">query</span>-<span class="keyword">sql</span> <span class="keyword">and</span> <span class="keyword">using</span> just <span class="keyword">like</span> a <span class="keyword">table</span>] </span><br><span class="line"><span class="keyword">ON</span> ([conditional expression here] <span class="keyword">AND</span> [...]...) </span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> [here you can <span class="keyword">execute</span> <span class="keyword">some</span> <span class="keyword">update</span> <span class="keyword">sql</span> <span class="keyword">or</span> something <span class="keyword">else</span> ] </span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> [<span class="keyword">execute</span> something <span class="keyword">else</span> here ! ]</span><br></pre></td></tr></table></figure><p>例如我们想插入一条数据  {ID=2,NAME=’newtest2’}  那么可以这么写： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span>  <span class="keyword">TEST</span> T1</span><br><span class="line"><span class="keyword">USING</span> (<span class="keyword">SELECT</span> <span class="string">'2'</span> <span class="keyword">as</span> <span class="keyword">ID</span>, <span class="string">'newtest2'</span> <span class="keyword">as</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> dual) T2 <span class="keyword">on</span> (T1.ID=T2.ID)</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> T1.NAME=T2.NAME</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span>  <span class="keyword">INSERT</span> (T1.ID, T1.NAME) <span class="keyword">VALUES</span> (T2.ID, T2.NAME );</span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><span style="color:red">注意：</span></h2><p>&emsp;&emsp;Merge Into的原理是，从using 搜出来的结果逐条与on条件匹配，然后决定是update还是Insert。 当USING后面的sql没有查询到数据的时候，Merge Into语句是不会执行update和Insert操作的。<br>所以要想让Merge Into正常运行，要保证USING 后面的SELECT有数据，个人喜欢使用DUAL表作为USING后的表，方便自己控制 </p><hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="DataBase" scheme="https://github.com/yibinliao/yibinliao.github/categories/DataBase/"/>
    
    
      <category term="oracle" scheme="https://github.com/yibinliao/yibinliao.github/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>关于java实体的几个概念</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-3/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/12/12/2019-12-12-note-3/</id>
    <published>2019-12-12T06:18:44.672Z</published>
    <updated>2019-12-18T06:20:01.662Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><p>&emsp;&emsp;由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：  </p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;<span style="color:red;font-weight:bold">VO（View Object）：</span>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。  </p><p>　　<span style="color:red;font-weight:bold">DTO（Data Transfer Object）：</span>数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。  </p><p>　　<span style="color:red;font-weight:bold">DO（Domain Object）：</span>领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。  </p><p>　　<span style="color:red;font-weight:bold">PO（Persistent Object）：</span>持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。  </p><h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><p><img src="https://liaoyibin.vip/images/2019-12-12-note-003-1.png" alt="image">  </p><ul><li>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。  </li><li>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。  </li><li>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。  </li><li>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。  </li><li>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。  </li></ul><h3 id="概念解析："><a href="#概念解析：" class="headerlink" title="概念解析："></a>概念解析：</h3><p>&emsp;&emsp;得出的主要结论是：在项目应用中，VO对应于页面上需要显示的数据（表单），DO对应于数据库中存储的数据（数据表），DTO对应于除二者之外需要进行传递的数据。  </p><h3 id="一、实体类"><a href="#一、实体类" class="headerlink" title="一、实体类"></a>一、实体类</h3><p>&emsp;&emsp;百度百科中对于实体类的定义如下：<br>实体类的主要职责是存储和管理系统内部的信息，它也可以有行为，甚至很复杂的行为，但这些行为必须与它所代表的实体对象密切相关。<br>根据以上定义，我们可以了解到，实体类有两方面内容，存储数据和执行数据本身相关的操作。这两方面内容对应到实现上，最简单的实体类是POJO类，含有属性及属性对应的set和get方法，实体类常见的方法还有用于输出自身数据的toString方法。<br><img src="https://liaoyibin.vip/images/2019-12-12-note-003-2.png" alt="image">  </p><h3 id="二、领域模型中的实体类"><a href="#二、领域模型中的实体类" class="headerlink" title="二、领域模型中的实体类"></a>二、领域模型中的实体类</h3><p>&emsp;&emsp;领域模型中的实体类分为四种类型：VO、DTO、DO、PO，各种实体类用于不同业务层次间的交互，并会在层次内实现实体类之间的转化。<br>业务分层为：视图层（VIEW+ACTION），服务层（SERVICE），持久层（DAO）<br>相应各层间实体的传递如下图：<br><img src="https://liaoyibin.vip/images/2019-12-12-note-003-3.png" alt="image">  </p><p>&emsp;&emsp;项目中我们并没有严格遵循这种传递关系，但这种和业务层次的关联对我们理解各实体类的作用是有帮助的。（我们没有接触到PO的原因，我理解为ORM对PO进行了封装）<br>以下是资料的原文，上图是基于此绘制的：<br>概念：  </p><p><span style="color:red;font-weight:bold">VO（View Object）：</span>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。  </p><p><span style="color:red;font-weight:bold">DTO（Data Transfer Object）：</span>数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。  </p><p><span style="color:red;font-weight:bold">DO（Domain Object）：</span>领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。  </p><p><span style="color:red;font-weight:bold">PO（PersistentObject）：</span>持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。  </p><p>模型：  </p><blockquote><p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置  </p></blockquote><p>l 用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。  </p><p>l 展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。  </p><p>l 服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。  </p><p>l服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。  </p><p>l 对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。  </p><h3 id="三、项目中的实体类"><a href="#三、项目中的实体类" class="headerlink" title="三、项目中的实体类"></a>三、项目中的实体类</h3><p>&emsp;&emsp;项目中常见的实体类有VO，DO和DTO，命名规则也常是以相应字符串结尾，如<em>VO.Java。但是DTO不总是遵循这个规则，而通常与他的用途有关，如写成</em>Query.java，表示存储了一个查询条件。项目中实体类出现的业务层次也没有这么严格，例如我们可以在视图层就组装一个DO，也可以将一个VO从持久层传出来，所以与业务分层相关联的划分方法显得有些冗余。从项目代码中抽象出的理解是：VO对应于页面上需要显示的数据，DO对应于数据库中存储的数据，DTO对应于除二者之外需要进行传递的数据。 </p><hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Note" scheme="https://github.com/yibinliao/yibinliao.github/categories/Note/"/>
    
    
      <category term="note" scheme="https://github.com/yibinliao/yibinliao.github/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>关于搭建hexo博客中的一些问题</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/11/2019-11-11-info/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/11/2019-11-11-info/</id>
    <published>2019-11-11T08:56:04.319Z</published>
    <updated>2019-12-12T06:55:07.366Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="https://blog.csdn.net/qq_37165235" target="_blank" rel="noopener">https://blog.csdn.net/qq_37165235</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：heo+next-5.1.4</strong></li><li><strong>编&emsp;&emsp;者：浅歌余生</strong></li></ul><hr><h1 id="一、关于搭建问题"><a href="#一、关于搭建问题" class="headerlink" title="一、关于搭建问题"></a>一、关于搭建问题</h1><p>&emsp;&emsp;<strong><font color="red" size="5" face="仿宋">1、执行命令的一些问题</font></strong><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.1、执行命令hexo server，提示：usage: hexo …. 提示找不到该指令</font>  </p><blockquote><blockquote><blockquote><p>解决方法: 在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：npm install hexo-server –save 安装此server后再试，问题解决。  </p></blockquote></blockquote></blockquote><p><br> &emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.2、执行：hexo server，启动了服务，在浏览器输入本地地址访问，看到白板和Cannot GET / 几个字</font> </p><blockquote><blockquote><blockquote><p>原因是由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： </p></blockquote></blockquote></blockquote><p><br> &emsp;&emsp;&emsp;&emsp;<code>npm install hexo-renderer-ejs--save</code><br><br> &emsp;&emsp;&emsp;&emsp;<code>npm install hexo-renderer-stylus--save</code><br><br> &emsp;&emsp;&emsp;&emsp;<code>npm install hexo-renderer-marked--save</code>  </p><blockquote><blockquote><blockquote><p>这时候重新启动本地服务在访问。或者： 在空文件夹下，执行hexo init – npm install</p></blockquote></blockquote></blockquote><p><br> &emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.3、localhost:4000 端口被占用，可执行 hexo s -p 5000 修改成5000 端口</font> </p><p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.4、YAMLException: incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line at line 1, column 33:</font><br><br> </p><blockquote><blockquote><blockquote><p>解决方案：（1）出现这种情况，一般都是缺少空格，在:冒号之后要有空格！检查x行y列附近的冒号，其之后是否跟了空格。此外关于修改配置文件后最好进行验证下文件是否合法，这里小彬推荐去这个站点<a href="http://www.yamllint.com/" target="_blank" rel="noopener" title="yml配置验证">http://www.yamllint.com/</a>验证，直接将配置文件全部复制到该站点，点击go便可看到是否合法，不合法的会提示，若明白原因可直接在这测试验证  </p></blockquote></blockquote></blockquote><p><br> &emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.5、在搭建hexo博客进行初始化操作 hexo init <code>&lt;folder&gt;</code> 报错：</font> </p><blockquote><blockquote><blockquote><p>报错信息：’hexo’ is not a recognized as an internal or external command, operable program or batch file<br><br><br><br>解决方法：配置hexo的环境变量<br><br><br><br>[注意]：执行命令时不要把&lt;&gt;也复制过去，执行时去掉这个就行。folder是你的站点名  </p></blockquote></blockquote></blockquote><p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.6、启动本地站点后，浏览器访问打开点击标签或者菜单报该错：</font> </p><p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1477.png" width="800" height="300"></div><p></p><br>>>>错误原因：出现该错误的本质就是404，路径存在问题[我当时的问题就是个坑是配置项空格导致的]<br>>>><br>>>>解决方法：把空格去掉，正确的应该是图中的格式。把第二个/后的空格去掉即可。  >>><p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1483.png" width="800" height="300"></div><p></p><p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.7、关于启动后页面存在中文乱码问题：</font> </p><blockquote><blockquote><blockquote><p>编辑文件保存时有中文记得将文件编码转为utf8编码,保证确实是转换成功了。可以用notepad++转换  </p></blockquote></blockquote></blockquote><p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.8、关于站点配置时区问题：</font> </p><blockquote><blockquote><blockquote><p>配置默认是：timezone: Asia/Shanghai，这个尽量不要修改否则会报错</p></blockquote></blockquote></blockquote><br>&emsp;&emsp;**<font color="red" size="5" face="仿宋">2、配置的一些异常</font>**  <br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">2.1、hexo更换主题后，本地运行测试命令行提示 : WARN No layout: index.html?</font> <br>>>>1.检查下载的主题是不是放在了themes文件夹下面，比如next主题的放置，就是点开themes就看到next的文件夹，next下面就是主题的文件，不能打开next文件夹还有themes  >>>2.检查站点配置_config.yml是不是下面的形式>>>>>>theme: 你的主题名字>>>>>>注意：（1）这里是theme，不是themes.>>>>>>          （2）theme后面与主题名直接有一个空格。>>>>>>          （3）主题名字是否与themes文件夹下 主题的名字一致。>>>&emsp;&emsp;&emsp;比如next：theme: next,冒号后面有空格。<p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">2.2、关于添加第三方服务-内容分享问题：</font><br><br></p><blockquote><blockquote><blockquote><p>问题描述：由于我使用的内容分享服务是<a href="https://www.addthis.com/" target="_blank" rel="noopener" title="AddThis">https://www.addthis.com/</a>具体配置在官方文档<a href="http://theme-next.iissnan.com/third-party-services.html#share-addthis" target="_blank" rel="noopener" title="第三方服务">http://theme-next.iissnan.com/third-party-services.html#share-addthis</a>有，刚开始由于网络问题我一直注册不了，便开启了配置项的另两项分享服务，结果导致后来一个服务都没有，似乎是会冲突，只开启一个就好。  </p></blockquote></blockquote><blockquote><blockquote><p>推荐使用AddThis功能全美观，比较好用些。可自定义配置</p></blockquote></blockquote></blockquote><p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">2.3、关于添加不蒜子数据统计问题：</font><br><br>  </p><blockquote><blockquote><blockquote><p>解决方法：打开主题配置..\hexo\folder\themes\next_config.yml,全文搜索属性：busuanzi_count将enable改为true即可，如图：  </p></blockquote></blockquote><p></p></blockquote><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1486.png" width="800" height="300"></div><p></p>>>>如果只是这样的话，打开站点后你会发现并没有数字只有文字，这是因为不蒜子的域名换了，js的外链地址需修改，域名位置为：themes\next\layout\_third-party\analytics\busuanzi-counter.swig>>>>>>修改busuanzi-counter.swig：>>>>>><p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1490.png" width="1000" height="300"></div><p></p>>>>>>>修改后代码：`<script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>`<br>  <h1 id="二、关于部署问题"><a href="#二、关于部署问题" class="headerlink" title="二、关于部署问题"></a>二、关于部署问题</h1><p>&emsp;&emsp;<strong><font color="red" size="5" face="仿宋">1、部署命令配置问题：</font></strong><br><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.1、命令写法注意事项，yml对缩进和空格要求很严格，每个英文冒号后面必须有一个空格，该缩进的地方必须要有缩进（比如下面的后三行代码）：[当然也有例外比如某些属性的布尔值就不允许存在空格]</font> </p><p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1502.png" width="1000" height="300"></div><p></p><p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">1.2、部署命令错误ERROR Deployer not found: git</font><br><br></p><blockquote><blockquote><blockquote><p>问题原因：这是因为你还没有安装hexo-deployer-git插件（Hexo 3.0以上版本默认是未安装的）。因此你需要手动安装：<br>在站点根目录执行命令：<code>$ npm install hexo-deployer-git --save</code>  </p></blockquote></blockquote></blockquote><br>&emsp;&emsp;**<font color="red" size="5" face="仿宋">2、代码上传托管：</font>**  <p><br>&emsp;&emsp;&emsp;<font color="black" size="5" face="仿宋">2.1、上传后打开网页样式为空？主要分gitee和GitHub说明</font><br><br>  </p><blockquote><p>问题描述：出现这个问题主要是站点配置文件的URL和root的问题</p><blockquote><p>2.1.1、github托管</p><blockquote><p>url格式为：<a href="https://github.com/[GitHub用户名]/[仓库名]">https://github.com/[GitHub用户名]/[仓库名]</a>  </p></blockquote></blockquote><blockquote><blockquote><p>root: /【root是根目录，当然若是你站点目录还有一层另当别论】</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>2.1.2、gitee托管</p><blockquote><p>URL格式：[仓库开启gitee pages服务后生成的地址]</p><p>root:[<a href="http://lyibin.gitee.io/后的名称]如图" target="_blank" rel="noopener">http://lyibin.gitee.io/后的名称]如图</a></p></blockquote></blockquote></blockquote><p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1505.png" width="1000" height="300"></div><p></p> <p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1506.png" width="1000" height="300"></div><p></p> <p>具体配置示例：  </p><p></p><div align="center"><img src="https://i.niupic.com/images/2019/11/11/_1509.png" width="1000" height="300"></div><p></p> <hr><p><strong><font color="red" size="3" face="仿宋">本次记录到此结束，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">哇咔咔(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;https://blog.csdn.net/qq_37165235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_3716523
      
    
    </summary>
    
    
      <category term="Problem" scheme="https://github.com/yibinliao/yibinliao.github/categories/Problem/"/>
    
    
      <category term="hexo" scheme="https://github.com/yibinliao/yibinliao.github/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;NVIDIA Jetson TX1 系列开发教程之三：Nsight Eclipse Edition基础&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-tx-3/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-tx-3/</id>
    <published>2019-11-08T02:45:04.372Z</published>
    <updated>2019-11-09T08:01:23.035Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>嵌入式平台：NVIDIA Jetson TX1</strong></li><li><strong>嵌入式系统：Ubuntu16.04</strong></li><li><strong>虚拟机系统：Ubuntu14.04</strong></li><li><strong>编者: WordZzzz</strong></li></ul><hr><p>&#160;&#160;&#160;&#160;Nsight Eclipse Edition是专为NVIDIA定制的Eclipse开发环境，主要区别是在菜单中加入了CUDA工程的建立、CUDAToolKit和NVIDIA的NVCC编译器等开发工具，方便开发者开发基于CUDA强大计算能力的各种工程项目。<br>&#160;&#160;&#160;&#160;根据上个教程安装完JetPcak3.0的各个功能模块之后，就可以在桌面的搜索框找出Nsight Eclipse Edition这个软件：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603170714026?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>&#160;&#160;&#160;&#160;本次教程以CUDA自带例程oceanFFT为例，介绍Nsight Eclips Edition的简单使用。</p><p>1.双击Nsight软件，弹出对话框，选择工作空间，即工作文件存放路径。确定后点击OK：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222057914?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>2.File-&gt;New-&gt;CUDA C/C++ Project，新建CUDA工程：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222149954?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>3.Project name：命名工程名称，Project type：提取CUDA例程，选定后点击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222210845?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="600"></div><p></p><p>4.选取CUDA例程，这里我们选择oceanFFT，选定后点击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222405743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="600"></div><p></p><p>5.基础设置默认即可，当然，对于TX1的PTX和GPU，标准的选择还是5.3，而不是2.0，选定后点击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222424384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="500"></div><p></p><p>6.选择链接，点击Management，创建新的链接，链接内容如第7步所示：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222443915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="600"></div><p></p><p>7.输入IP和用户名，通过SSH登陆，填完后点击Finish：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222504197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="500"></div><p></p><p>8.选择Project Path、Toolkit和CPU类型，选定后点击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222524428?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="600"></div><p></p><p>9.编译版本默认即可，选定后点击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222544772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="600"></div><p></p><p>10.工程文件：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222611007?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="500"></div><p></p><p>11.Ctrl+B,构建：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603222627492?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>12.在TX1上找到相应目录，运行相应二进制文件，运行效果如下：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170603224024916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>&#160;&#160;&#160;&#160;下篇博文将以JetPack3.0为例，向大家介绍Nsight进阶开发。</p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="TX1" scheme="https://github.com/yibinliao/yibinliao.github/categories/TX1/"/>
    
    
      <category term="TX1" scheme="https://github.com/yibinliao/yibinliao.github/tags/TX1/"/>
    
      <category term="Nsight" scheme="https://github.com/yibinliao/yibinliao.github/tags/Nsight/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;NVIDIA Jetson TX1 系列开发教程之二：刷机与开发前准备&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-tx-2/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-tx-2/</id>
    <published>2019-11-08T02:45:04.371Z</published>
    <updated>2019-11-09T08:01:31.534Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>嵌入式平台：NVIDIA Jetson TX1</strong></li><li><strong>嵌入式系统：Ubuntu16.04</strong></li><li><strong>虚拟机系统：Ubuntu14.04</strong></li><li><strong>编者: WordZzzz</strong></li></ul><hr><p><strong><font color="black" size="5" face="仿宋">1.  JetPack3.0下载与安装</font></strong></p><p>本人PC端使用虚拟机安装Ubuntu14.04系统进行开发，需要有效联网。</p><p>1.首先在自己的home目录下创建Jetson文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/Jetson</span><br><span class="line">$ cd ~/Jetson</span><br></pre></td></tr></table></figure><p>2.下载可执行文件到新建的Jetson文件夹下：<br><a href="https://developer.nvidia.com/embedded/downloads" target="_blank" rel="noopener">https://developer.nvidia.com/embedded/downloads</a></p><p>3.在虚拟机上运行安装脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x  ./JetPack-L4T-&lt;version&gt;-linux-x64.run</span><br><span class="line">$ ./JetPack-L4T-&lt;version&gt;-linux-x64.run</span><br></pre></td></tr></table></figure><p>之后出现如下图所示，单击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514162457089?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>之后会显示安装路径，单击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514163056458?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>4.接下来是开发板选型，这里我选TX1，单击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514163208366?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>5.输入root用户密码：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514163407807?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>6.联网获取安装包信息，此处必须联网，否则出不来安装信息，选完安装信息之后单击Next（ps：一般默认即可，只安装Jetpack不刷机的话就把下面的Target-Jetson TX1的Action一栏全部改为no action；由于我的已经安装完毕，所以Action一栏都是no action）：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514164423772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>7.接受所选组件的许可协议，全部同意并单击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514164513150?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>8.报错的话就按提示安装依赖库后再进行Jetpack安装：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514165036562?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>9.安装完成后如下图所示，单机Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514165440464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>10.点击Finish即可完成安装，最好不要勾选移除安装包：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514165617027?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p><strong><font color="black" size="5" face="仿宋">2.  刷机</font></strong><br>&#160;&#160;&#160;&#160;刷机过程需要重复上述1-5步，并且在第6步中Target-Jetson TX1的Action一栏改为需要的各个软件安装版本。所以刷机从第6步开始介绍.<br>6.联网获取安装包信息，此处必须联网，否则出不来安装信息，选完安装信息之后单击Next（一般默认即可）：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514170240735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>7.接受所选组件的许可协议，全部同意并单击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514164513150?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p>8.该组件管理器将继续安装。一旦主机的安装步骤完成后，单击下一步按钮继续安装目标组件。<p></p><div align="center"><img src="http://img.blog.csdn.net/20170514165440464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>9.a.如果在6中取消选择Flash OS的组件管理器（即不烧写系统，只烧写某些组件），将需要输入IP地址，用户名和密码来建立ssh连接到目标设备：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514171202482?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>9.b.如果在6中选择Flash OS的组件管理器，需要选择适合的特定环境中的网络布局：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514171121200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p>10.a.如果选择了通过路由器/交换机设备访问互联网的布局，你会被要求选择哪个接口用于上网。<p></p><div align="center"><img src="http://img.blog.csdn.net/20170514171519491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>10.b.如果您选择的设备通过主机IP获得通过指定DHCP服务器主机和访问互联网上的布局，您必须选择哪个接口是用于上网，并且将被用于目标接口。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514171554051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>11.烧写确认，单击Next：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514173025649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>12.之后会弹出POST窗口来引导你开启USB强制恢复模式：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170521110312924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>&#160;&#160;&#160;&#160;TX1与主机使用usb连接，开启USB强制恢复模式（关机情况下，按一下POWER键，再长按REC键的同时点按RESET键，两秒后松开REC键）此时虚拟机会弹出NVIDIA设备：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514172001604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>可以lsusb确认一下：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514172036136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="200"></div><p></p><p>13.在POST窗口中回车，开始安装：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514172117995?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>14.系统安装完成后板子会重启。如果TX1重启后出现了Ubuntu的GUI界面，说明系统已经安装完成。重启完之后POST窗口会提示你输入IP地址，这里如果输入正确，等待十分钟左右就会进入下一个界面；如果失败，最好查看一下TX1现在的IP。接下来就需要安装CUDA、OpenCV等组件。在按Enter继续安装之前，需要确保TX1已经连网外网，如果校园网需要登录网关这样的，先将网关登录好再继续，因为安装组件的时候，需要安装一些依赖库，需要有外网的情况下才能进行。按Enter继续后，会出现提示信息，确定TX1的IP地址，手动输入TX1的IP地址后，按回车继续，稍等一会儿，会出现如下对话框（和9a里的一样，如果执行的9a而不是9b，这里就不会再出现确认信息）：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514171202482?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>15.一路NEXT，再次进入POST界面，此时使用SSH远程服务，无需下载线。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514172710005?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>16.安装完之后，程序自动关闭POST，回到如下界面，点击FINISH完成安装。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514172808920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p><strong><font color="black" size="5" face="仿宋">3.  测试</font></strong><br>Jetpack自动编译所有例程，CUDA例程可以在以下目录中找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;JetPack_Install_Dir&gt; / NVIDIA_CUDA- &lt;版本&gt; _samples</span><br></pre></td></tr></table></figure><p>可以通过重新编译运行示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SMS=53 EXTRA_LDFLAGS=--unresolved-symbols=ignore-in-shared-libs TARGET_ARCH=aarch64 make</span><br></pre></td></tr></table></figure><p>运行：<br>CUDA的例程编译后的二进制文件目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/NVIDIA_CUDA-&lt;version&gt;_Samples/bin/aarch64/linux/release/</span><br></pre></td></tr></table></figure><p>命令行运行或双击运行：<br>例如，当您运行oceanFFT样品，将显示如下画面。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170514174244191?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p><strong><font color="black" size="5" face="仿宋">4.  开发前准备工作</font></strong></p><p><strong>更新源：</strong></p><p>&#160;&#160;&#160;&#160;因为默认源会找不到我们下述要用的一些依赖库和安装包，所以需要加入国内源，本例中采用的是中科大的源。值得注意的是，如果你之后回头来刷固件，一定还要把源换回来，否则有可能会安装失败。所以我们先做一下备份：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>在sources.list中将被#注释掉的源全部打开，随后在底部添加新的源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu-ports trusty main universe restricted multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu-ports trusty-security main universe restricted multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu-ports trusty-updates main universe restricted multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu-ports trusty main universe restricted multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu-ports trusty-security main universe restricted multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu-ports trusty-updates main universe restricted multiverse</span><br></pre></td></tr></table></figure><p>保存文件后，进行更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p><strong>浏览器安装：</strong></p><p>&#160;&#160;&#160;&#160;<font color="red">直接能上外网的请忽略此步骤。</font></p><p>&#160;&#160;&#160;&#160;由于身在校内，且实验室网络连接都是交换机模式，每一台设备连接外网时都需要登陆，所以就涉及到浏览器的安装。当然，大家也可以直接用PYTHON写个登陆脚本也是可以的。</p><p>&#160;&#160;&#160;&#160;NVIDIA Jetson TX1自带系统没有浏览器是个很尴尬的事情。我们尝试了两款浏览器，分别是Epiphany和Firefox。前者相对稳定，但是用一段时间之后就再也不能跳转至校园网登陆界面；后者经常闪退，但是至少还给我输入账号密码的机会。最后我们选择的是Firefox。</p><p>&#160;&#160;&#160;&#160;安装浏览器也需要联网，so，还得先用WiFi连接一下个人热点。</p><p>安装Epiphany：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install epiphany-browser</span><br></pre></td></tr></table></figure><p>安装Firefox：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install firefox-browser</span><br></pre></td></tr></table></figure><p><strong>输入法安装：</strong></p><p>&#160;&#160;&#160;&#160;命令行操作一般不需要使用输入法，但是如果我们想在GUI上进行一些操作，比如上网查资料等，输入法还是得有的。</p><p>安装google输入法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ibus-googlepinyin</span><br><span class="line">sudo reboot now</span><br></pre></td></tr></table></figure><p>&#160;&#160;&#160;&#160;安装完后重启系统，随后在GUI界面右上角找到文本输入设置(Text Entry Settings)，在里面将自己新下载的google输入法添加进去即可，操作和WINDOWS下添加输入法一样，故不在此赘述。</p><p><strong>lrzsz安装：</strong></p><p>&#160;&#160;&#160;&#160;NVIDIA Jetson TX1的SSH服务（端口号：22）已经配好，所以我们可以直接使用Xshell或者其他支持SSH远程登陆的客户端软件通过SSH服务来连接TX1，从而方便多人在WINDOWS上远程操控TX1。当然，Xshell是不支持图形界面的，如果想远程登录图形界面，可以配置一下vncserver，但是会消耗资源，个人不建议使用。</p><p>&#160;&#160;&#160;&#160;远程登录难免涉及到文件传输，文件传输有两种方法，大文件最好用FTP来传输，推荐使用File Zilla；小文件Xshell自己就可以搞定，需要在TX1上安装lrzsz。</p><p>安装lrzsz：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lrzsz</span><br></pre></td></tr></table></figure><p>sz发送TX1文件到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz filename</span><br></pre></td></tr></table></figure><p>rz发送本地文件到服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p>&#160;&#160;&#160;&#160;下篇博文将以JetPack3.0为例，向大家介绍如何使用Nsight进行程序开发。</p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="TX1" scheme="https://github.com/yibinliao/yibinliao.github/categories/TX1/"/>
    
    
      <category term="TX1" scheme="https://github.com/yibinliao/yibinliao.github/tags/TX1/"/>
    
      <category term="刷机" scheme="https://github.com/yibinliao/yibinliao.github/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;NVIDIA Jetson TX1 系列开发教程之一：开箱测试&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-tx-1/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-tx-1/</id>
    <published>2019-11-08T02:45:04.368Z</published>
    <updated>2019-11-09T08:01:41.316Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>嵌入式平台：NVIDIA Jetson TX1</strong></li><li><strong>嵌入式系统：Ubuntu16.04</strong></li><li><strong>编者: WordZzzz</strong></li></ul><hr><p><strong><font color="black" size="5" face="仿宋">1. 概述</font></strong></p><p>&#160;&#160;&#160;&#160;NVIDIA的Jetson TX1是嵌入式系统级模块（SoM），具有四核ARM Cortex-A57，4GB LPDDR4和集成的256核Maxwell GPU。 </p><p>&#160;&#160;&#160;&#160;对于部署计算机视觉和深度学习而言非常有用，Jetson TX1运行Linux(定制Ubuntu)，并提供1TFLOPS的FP16计算性能，功耗为10瓦。</p><p>&#160;&#160;&#160;&#160;Jetson TX1可作为模块，开发套件和兼容的生态系统产品。更多详细信息可以登录<a href="http://www.nvidia.cn/object/embedded-systems-dev-kits-modules-cn.html" target="_blank" rel="noopener">NVIDIA官网（此处有链接）</a>进行了解，也可通过<a href="http://elinux.org/Jetson_TX1" target="_blank" rel="noopener">Wikipedia（此处有链接）</a>进行TX1模组参数的快速预览。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170507174659130?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><hr><p><strong><font color="black" size="5" face="仿宋">2. 基本参数</font></strong></p><p><strong>处理组件：</strong></p><ul><li>四核ARM Cortex-A57</li><li>256核Maxwell GPU</li><li>4GB LPDDR4</li><li>16GB eMMC</li><li>H.264 / H.265编码器和解码器</li><li>双ISP（图像服务处理器）</li></ul><p><strong>端口和外设：</strong></p><ul><li>HDMI 2.0</li><li>802.11ac WiFi，蓝牙4.0</li><li>USB3，USB2</li><li>千兆以太网</li><li>12路MIPI CSI 2.0</li><li>4车道PCIe gen 2.0</li><li>SATA，2x SD卡</li><li>3x UART，3x SPI，4x I2C</li></ul><p><strong>构成因素：</strong></p><ul><li>400针Samtec板对板连接器</li><li>尺寸：50x87mm  （1.96“x 3.42”）</li><li>质量：45克</li><li>热转印板（TTP），-25C至85C工作温度</li><li>5.5-19.6VDC输入功率（消耗10-15W，典型负载下）</li></ul><p><strong>软件支持：</strong></p><ul><li>JetPack 2.3</li><li>Linux4Tegra R24.2 (L4T) for ARM (Ubuntu 16.04 aarch64)</li><li>CUDA Toolkit 8</li><li>cuDNN v5.1</li><li>TensorRT 1.0</li><li>VisionWorks 1.5</li><li>OpenCV4Tegra 2.4.13</li><li>OpenGL 4.4</li><li>OpenGL ES 3.1</li><li>Vulkan</li><li>V4L2 media controller support</li><li>gstreamer / OpenMAX</li><li>Tegra System Profiler (TSP)</li><li>Tegra Graphics Debugger</li><li>PerfKit 4.5.1</li></ul><p><strong><font color="black" size="5" face="仿宋">3. 开箱测试</font></strong></p><p>&#160;&#160;&#160;&#160;小五千大洋买回来的宝贝，拿到手还有点小激动（图片来自我的partner：Jack Cui）：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170507192357194?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>&#160;&#160;&#160;&#160;包装很高大上，下面来介绍一下开发套件的内容：TX1开发套件（含TX1模组）、一个19V电源适配器（尴尬的是没有插座线）、两个天线（用于TX1模组的WiFi和蓝牙）、Micro USB线和USB-OTG线。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170507192426987?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p>&#160;&#160;&#160;&#160;光有上面这些开发套件包含的东西是不能正常使用的，你还需要下面这些设备：</p><ul><li>电源适配器插头：</li></ul><p></p><div align="center"><img src="http://img.blog.csdn.net/20170507192456925?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><ul><li>2K显示屏：（开发套件原装系统默认分辨率为2K）。</li></ul><p>&#160;&#160;&#160;&#160;这里有点尴尬，除非你能保证你可以在没有显示器的情况下就能输入命令行修改分辨率（想办法调出命令行然后输入：xrandr -s 1208x720），否则还是找一块2K显示屏来吧。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170507175904716?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="400" height="400"></div><p></p><ul><li>鼠键套装：</li></ul><p></p><div align="center"><img src="http://img.blog.csdn.net/20170507180214767?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="600" height="400"></div><p></p><p><strong><font color="black" size="5" face="仿宋">4.调出桌面：</font></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/NVIDIA-INSTALL</span><br><span class="line">sudo ./install.sh</span><br><span class="line">sudo reboot now</span><br></pre></td></tr></table></figure><p>&#160;&#160;&#160;&#160;重启电脑之后，我们就可以看到ubuntu系统的桌面了。Jetson TX1出厂时默认的系统以及各依赖工具版本比较老旧，所以我们需要进行刷机来部署最新版本的JetPack。</p><p>&#160;&#160;&#160;&#160;下篇博文将以JetPack3.0为例，向大家介绍如何进行刷机。<br>&#160;&#160;&#160;&#160;下周日更新。</p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="TX1" scheme="https://github.com/yibinliao/yibinliao.github/categories/TX1/"/>
    
    
      <category term="TX1" scheme="https://github.com/yibinliao/yibinliao.github/tags/TX1/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Sublime Text 3 搭建Python开发环境 码代码 美如画&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-7/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-7/</id>
    <published>2019-11-08T02:45:04.366Z</published>
    <updated>2019-11-09T08:02:25.680Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：Sublime Text 3 Build 3143</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;Sublime Text：一款具有代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，用她来写代码，绝对是一种享受。相比于难于上手的 Vim ，浮肿沉重的 Eclipse ， VS ，即便体积轻巧迅速启动的 Editplus 、 Notepad++ ，在 Sublime Text 面前也略显失色，无疑这款性感无比的编辑器是 Coding 和 Writing 最佳的选择，没有之一。</p><p>&emsp;&emsp;Sublime Text 3 的功能实在是太强大了，搭配各种 package ，码代码、美如画。对于 Sublime Text 3 的介绍网上一大堆，博主就不再这里赘述了。本篇博文主要是记录一下博主如何在 Sublime Text 3 下优雅的编写、编译、运行 python 代码。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>&emsp;&emsp;WordZzzz使用的版本是 Sublime Text Build 3143 ，大家自行下载后直接安装即可，安装完之后需要 License 来激活我们的软件。</p><p>&emsp;&emsp;直接将下面的 License 复制过去就好，亲测可用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">—– BEGIN LICENSE —– </span><br><span class="line">TwitterInc </span><br><span class="line">200 User License </span><br><span class="line">EA7E-890007 </span><br><span class="line">1D77F72E 390CDD93 4DCBA022 FAF60790 </span><br><span class="line">61AA12C0 A37081C5 D0316412 4584D136 </span><br><span class="line">94D7F7D4 95BC8C1C 527DA828 560BB037 </span><br><span class="line">D1EDDD8C AE7B379F 50C9D69D B35179EF </span><br><span class="line">2FE898C4 8E4277A8 555CE714 E1FB0E43 </span><br><span class="line">D5D52613 C3D12E98 BC49967F 7652EED2 </span><br><span class="line">9D2D2E61 67610860 6D338B72 5CF95C69 </span><br><span class="line">E36B85CC 84991F19 7575D828 470A92AB </span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h3><p>&emsp;&emsp;按 Ctrl+` 调出 console ，粘贴以下代码到底部命令行并回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;重启 Sublime Text 3。如果在 Perferences-&gt;package settings 中看到 package control 这一项，则安装成功。按下 Ctrl+Shift+P 调出命令面板输入 install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</p><p>&emsp;&emsp;下面介绍几个比较实用的 package 。</p><h3 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h3><p>&emsp;&emsp;SideBarEnhancements 扩展了侧边栏中菜单选项的数量，从而提升你的工作效率。诸如 “New file” 和 “Duplicate” 这样的选项对于 ST3 来说实在是太重要了，而且仅凭 “Delete” 这一个功能就让这个插件值得下载。这个功能将你会在你删除文件的时候把它放入回收站。虽然这个功能乍一看没什么用，但是当你没有使用这样的功能而彻底删除了一个文件的时候，除非你用了版本管理软件，否则你将很难恢复这个文件。</p><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>&emsp;&emsp;Anaconda 是一个终极 Python 插件。它为 ST3 增添了多项 IDE 类似的功能，例如：</p><ul><li>Autocompletion 自动完成，该选项默认开启，同时提供多种配置选项。</li><li>Code linting 使用支持 pep8 标准的 PyLint 或者 PyFlakes。</li><li>McCabe code complexity checker 让你可以在特定的文件中使用 McCabe complexity checker. </li><li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数，或者类的定义。</li><li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li><li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li></ul><p>&emsp;&emsp;但是，刚安装完之后，打开一个 python 文档，所有代码都会被白色细线框中，如图所示；</p><p>&emsp;&emsp;强迫症的我看着好难受，决心要搞一搞这东西。后来发现在 Sublime &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Settings – Default 下修改 linting behaviour 选项即可，我这里改成了只有在保存的时候linting工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    Sets the linting behaviour for anaconda:</span><br><span class="line"></span><br><span class="line">    &quot;always&quot; - Linting works always even while you are writing (in the background)</span><br><span class="line">    &quot;load-save&quot; - Linting works in file load and save only</span><br><span class="line">    &quot;save-only&quot; - Linting works in file save only</span><br><span class="line">*/</span><br><span class="line">&quot;anaconda_linting_behaviour&quot;: &quot;save-only&quot;,</span><br></pre></td></tr></table></figure><h3 id="SublimeREPL"><a href="#SublimeREPL" class="headerlink" title="SublimeREPL"></a>SublimeREPL</h3><p>&emsp;&emsp;这可能是对程序员来说最有用的插件。SublimeREPL 允许你在 Sublime Text 中运行各种语言（NodeJS ，Python，Ruby， Scala 和 Haskell 等等）。</p><p>&emsp;&emsp;在 Sublime &gt; Tools &gt; SublimeREPL 下我们可以看到 SublimeREPL 支持运行的所有语言。</p><p>&emsp;&emsp;下面的代码是在 AppData\Roaming\Sublime Text 3\Packages\SublimeREPL\config\Python 下的 Default.sublime-commands 文件，从中我们可以看到 SublimeREPL 所支持的 python 的各种运行方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;caption&quot;: &quot;SublimeREPL: Python&quot;,</span><br><span class="line">        &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: &quot;repl_python&quot;,</span><br><span class="line">            &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;caption&quot;: &quot;SublimeREPL: Python - PDB current file&quot;,</span><br><span class="line">        &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: &quot;repl_python_pdb&quot;,</span><br><span class="line">            &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,</span><br><span class="line">        &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: &quot;repl_python_run&quot;,</span><br><span class="line">            &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;command&quot;: &quot;python_virtualenv_repl&quot;,</span><br><span class="line">        &quot;caption&quot;: &quot;SublimeREPL: Python - virtualenv&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;caption&quot;: &quot;SublimeREPL: Python - IPython&quot;,</span><br><span class="line">        &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: &quot;repl_python_ipython&quot;,</span><br><span class="line">            &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来配置快捷键，打开 Sublime &gt; Preferences &gt; Key Building ，在右侧栏（ User 部分）添加下面的代码。下面的代码用 F5 来执行当前 Python 脚本，用 F4 来实现切换至 Python 命令行窗口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;&quot;keys&quot;:[&quot;f5&quot;],</span><br><span class="line">&quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,</span><br><span class="line">&quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">&#123;&quot;id&quot;: &quot;repl_python_run&quot;,</span><br><span class="line">&quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;&#125;&#125;</span><br><span class="line">,</span><br><span class="line">&#123;&quot;keys&quot;:[&quot;f4&quot;],</span><br><span class="line">&quot;caption&quot;: &quot;SublimeREPL: Python&quot;,</span><br><span class="line">&quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;:</span><br><span class="line">&#123;&quot;id&quot;: &quot;repl_python&quot;,</span><br><span class="line">&quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;&#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当然，如果你电脑里面安装了两个版本的 Python ，而你想指定使用某个版本，则需要修改下面的代码。下面的代码是在 AppData\Roaming\Sublime Text 3\Packages\SublimeREPL\config\Python 下的 Main.sublime-menu 文件，主要修改 “cmd” 后面跟着的 python 命令。比如我电脑里 python2.7 的执行程序命名是 python.exe ，而 python3.6 的执行程序命名为 python3.exe ，我想要使用 python3 ，所以把所有 “cmd” 后面跟着的命令都改为 “python3” 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     &#123;</span><br><span class="line">        &quot;id&quot;: &quot;tools&quot;,</span><br><span class="line">        &quot;children&quot;:</span><br><span class="line">        [&#123;</span><br><span class="line">            &quot;caption&quot;: &quot;SublimeREPL&quot;,</span><br><span class="line">            &quot;mnemonic&quot;: &quot;R&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;SublimeREPL&quot;,</span><br><span class="line">            &quot;children&quot;:</span><br><span class="line">            [</span><br><span class="line">                &#123;&quot;caption&quot;: &quot;Python&quot;,</span><br><span class="line">                &quot;id&quot;: &quot;Python&quot;,</span><br><span class="line"></span><br><span class="line">                 &quot;children&quot;:[</span><br><span class="line">                    &#123;&quot;command&quot;: &quot;repl_open&quot;,</span><br><span class="line">                     &quot;caption&quot;: &quot;Python&quot;,</span><br><span class="line">                     &quot;id&quot;: &quot;repl_python&quot;,</span><br><span class="line">                     &quot;mnemonic&quot;: &quot;P&quot;,</span><br><span class="line">                     &quot;args&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;subprocess&quot;,</span><br><span class="line">                        &quot;encoding&quot;: &quot;utf8&quot;,</span><br><span class="line">                        &quot;cmd&quot;: [&quot;python3&quot;, &quot;-i&quot;, &quot;-u&quot;],</span><br><span class="line">                        &quot;cwd&quot;: &quot;$file_path&quot;,</span><br><span class="line">                        &quot;syntax&quot;: &quot;Packages/Python/Python.tmLanguage&quot;,</span><br><span class="line">                        &quot;external_id&quot;: &quot;python&quot;,</span><br><span class="line">                        &quot;extend_env&quot;: &#123;&quot;PYTHONIOENCODING&quot;: &quot;utf-8&quot;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;&quot;command&quot;: &quot;python_virtualenv_repl&quot;,</span><br><span class="line">                     &quot;id&quot;: &quot;python_virtualenv_repl&quot;,</span><br><span class="line">                     &quot;caption&quot;: &quot;Python - virtualenv&quot;&#125;,</span><br><span class="line">                    &#123;&quot;command&quot;: &quot;repl_open&quot;,</span><br><span class="line">                     &quot;caption&quot;: &quot;Python - PDB current file&quot;,</span><br><span class="line">                     &quot;id&quot;: &quot;repl_python_pdb&quot;,</span><br><span class="line">                     &quot;mnemonic&quot;: &quot;D&quot;,</span><br><span class="line">                     &quot;args&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;subprocess&quot;,</span><br><span class="line">                        &quot;encoding&quot;: &quot;utf8&quot;,</span><br><span class="line">                        &quot;cmd&quot;: [&quot;python3&quot;, &quot;-i&quot;, &quot;-u&quot;, &quot;-m&quot;, &quot;pdb&quot;, &quot;$file_basename&quot;],</span><br><span class="line">                        &quot;cwd&quot;: &quot;$file_path&quot;,</span><br><span class="line">                        &quot;syntax&quot;: &quot;Packages/Python/Python.tmLanguage&quot;,</span><br><span class="line">                        &quot;external_id&quot;: &quot;python&quot;,</span><br><span class="line">                        &quot;extend_env&quot;: &#123;&quot;PYTHONIOENCODING&quot;: &quot;utf-8&quot;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;&quot;command&quot;: &quot;repl_open&quot;,</span><br><span class="line">                     &quot;caption&quot;: &quot;Python - RUN current file&quot;,</span><br><span class="line">                     &quot;id&quot;: &quot;repl_python_run&quot;,</span><br><span class="line">                     &quot;mnemonic&quot;: &quot;R&quot;,</span><br><span class="line">                     &quot;args&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;subprocess&quot;,</span><br><span class="line">                        &quot;encoding&quot;: &quot;utf8&quot;,</span><br><span class="line">                        &quot;cmd&quot;: [&quot;python3&quot;, &quot;-u&quot;, &quot;$file_basename&quot;],</span><br><span class="line">                        &quot;cwd&quot;: &quot;$file_path&quot;,</span><br><span class="line">                        &quot;syntax&quot;: &quot;Packages/Python/Python.tmLanguage&quot;,</span><br><span class="line">                        &quot;external_id&quot;: &quot;python&quot;,</span><br><span class="line">                        &quot;extend_env&quot;: &#123;&quot;PYTHONIOENCODING&quot;: &quot;utf-8&quot;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;&quot;command&quot;: &quot;repl_open&quot;,</span><br><span class="line">                     &quot;caption&quot;: &quot;Python - IPython&quot;,</span><br><span class="line">                     &quot;id&quot;: &quot;repl_python_ipython&quot;,</span><br><span class="line">                     &quot;mnemonic&quot;: &quot;I&quot;,</span><br><span class="line">                     &quot;args&quot;: &#123;</span><br><span class="line">                        &quot;type&quot;: &quot;subprocess&quot;,</span><br><span class="line">                        &quot;encoding&quot;: &quot;utf8&quot;,</span><br><span class="line">                        &quot;autocomplete_server&quot;: true,</span><br><span class="line">                        &quot;cmd&quot;: &#123;</span><br><span class="line">                            &quot;osx&quot;: [&quot;python3&quot;, &quot;-u&quot;, &quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;],</span><br><span class="line">                            &quot;linux&quot;: [&quot;python3&quot;, &quot;-u&quot;, &quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;],</span><br><span class="line">                            &quot;windows&quot;: [&quot;python3&quot;, &quot;-u&quot;, &quot;$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py&quot;]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;cwd&quot;: &quot;$file_path&quot;,</span><br><span class="line">                        &quot;syntax&quot;: &quot;Packages/Python/Python.tmLanguage&quot;,</span><br><span class="line">                        &quot;external_id&quot;: &quot;python&quot;,</span><br><span class="line">                        &quot;extend_env&quot;: &#123;</span><br><span class="line">                            &quot;PYTHONIOENCODING&quot;: &quot;utf-8&quot;,</span><br><span class="line">                            &quot;SUBLIMEREPL_EDITOR&quot;: &quot;$editor&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;别忘了， Sublime Text 3 也有自己的 build 功能，即也支持 python 等语言的代码构建（ ctrl + b ）。同样的，我们如何添加不同的 python 版本到我们的构建系统呢？很简单，Sublime &gt; Tools &gt; Build System &gt; New Build System，分别添加如下代码之后，再分别保存为 python2.sublime-build 和 python3.sublime-build ，这样，当我们再次打开 Sublime &gt; Tools &gt; Build System 之后，就会发现我们新添加的 python2 和 python3 构建系统了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;cmd&quot;: [&quot;D:/Program Files/Python/Python27/python.exe&quot;, &quot;-u&quot;, &quot;$file&quot;],</span><br><span class="line">&quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line([0-9]*)&quot;,</span><br><span class="line">&quot;selector&quot;: &quot;source.python&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;cmd&quot;: [&quot;D:/Program Files/Python/Python36/python3.exe&quot;, &quot;-u&quot;, &quot;$file&quot;],</span><br><span class="line">&quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line([0-9]*)&quot;,</span><br><span class="line">&quot;selector&quot;: &quot;source.python&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SublimeTmpl"><a href="#SublimeTmpl" class="headerlink" title="SublimeTmpl"></a>SublimeTmpl</h3><p>&emsp;&emsp;快速生成文件模板</p><p>&emsp;&emsp;，SublimeTmpl能新建html、css、javascript、php、python、ruby六种类型的文件模板，所有的文件模板都在插件目录的templates文件夹里，可以自定义编辑文件模板。</p><p>&emsp;&emsp;SublimeTmpl默认的快捷键:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctrl+alt+h html</span><br><span class="line">ctrl+alt+j javascript</span><br><span class="line">ctrl+alt+c css</span><br><span class="line">ctrl+alt+p php</span><br><span class="line">ctrl+alt+r ruby</span><br><span class="line">ctrl+alt+shift+p python</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我想修改一下python模板，所以就需要进行如下操作：Sublime &gt; Preferences &gt; Package Settings &gt; SublimeTmpl &gt; Settings – User 添加如下代码。然后 ctrl+alt+shift+p 来新建一个模板试试看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    &quot;disable_keymap_actions&quot;: false, // &quot;all&quot;; &quot;html,css&quot;  </span><br><span class="line">    &quot;date_format&quot; : &quot;%Y-%m-%d %H:%M:%S&quot;,  </span><br><span class="line">    &quot;attr&quot;: &#123;  </span><br><span class="line">        &quot;author&quot;: &quot;WordZzzz&quot;,  </span><br><span class="line">        &quot;email&quot;: &quot;wordzzzz@foxmail.com&quot;,  </span><br><span class="line">        &quot;link&quot;: &quot;http://blog.csdn.net/u011475210&quot;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;快捷键也是可以更改的，全部在 Sublime &gt; Preferences &gt; Package Settings &gt; SublimeTmpl 的设置中。</p><p>&emsp;&emsp;如果想要新建其他类型的文件模板的话，先自定义文件模板方在templates文件夹里，再分别打开Default (Windows).sublime-keymap、Default.sublime-commands、Main.sublime-menu、SublimeTmpl.sublime-settings这四个文件照着里面的格式自定义想要新建的类型，这里就不详细介绍了，请各位自己折腾哈~</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>跳转到任意内容 (“cmd+p”) 用来快速查找和打开文件。你仅仅只需要工程中文件的一部分路径或者文件名你就可以很容易的打开这个文件。这在一个大型的 Django 工程中显得非常方便。</li><li>跳转到指定行 (“ctrl+g”) 让你在当前文件中跳转到指定行数。</li><li>跳转到标志 (“cmd+r”) 可以列出当前文件中所有的函数或者类，让你更方便查找。你可以通过输入关键字来查找你所需要的函数或者类。</li><li>跳转到行首 (cmd+left-arrow-key) 与 跳转到行尾 (cmd+right-arrow-key)</li><li>删除当前行(ctrl+shift+k)</li><li>多重编辑 是我迄今为止最喜欢的快捷键<br>选定一个单词，点击 “cmd+d”来选择同样的单词，再次点击 “cmd+d”*继续选择下一个单词…<br>或者 “cmd+单击”来指定多个你想要同时修改的地方。</li><li>块编辑 (option+left-mouse-click) 用于选择一整块的内容。通常在整理 CSV 文件的时候用于删除空白内容。</li></ul><h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><p>&emsp;&emsp;你可以很容易地使用 Python 来编辑你自己的自定义命令和快捷键组合。例如：</p><ul><li>拷贝当前文件路径到剪贴板 – 链接</li><li>关闭除当前活动标签页以外的所有其他标签页 – 链接</li></ul><p>&emsp;&emsp;通过文件选项打开你的 Package 文件夹(Sublime &gt; Preferences &gt; Browse Packages)，然后打开 User 文件夹，接下来将上述的 Python 文件添加到 “/Sublime Text 3/Packages/User” 文件夹中。</p><p>&emsp;&emsp;最后请在 Key Bindings – User file (Sublime Text &gt; Preferences &gt; Package Settings &gt; AdvancedNewFile &gt; Key Bindings – User) 文件中完成快捷键绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  // Copy file name</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;keys&quot;: [&quot;cmd+shift+c&quot;],</span><br><span class="line">     &quot;command&quot;: &quot;copy_path_to_clipboard&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // Close all other tabs</span><br><span class="line">  &#123;  </span><br><span class="line">    &quot;keys&quot;: [&quot;cmd+alt+w&quot;],</span><br><span class="line">    &quot;command&quot;: &quot;close_tabs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="Sublime" scheme="https://github.com/yibinliao/yibinliao.github/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Python3：字典中的items()函数&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-6/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-6/</id>
    <published>2019-11-08T02:45:04.364Z</published>
    <updated>2019-11-09T08:02:34.027Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：python-3.6.2-amd64</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><p><strong><font color="black" size="5" face="仿宋">一、Python2.x中items()：</font></strong></p><p>&emsp;&emsp;和之前一样，本渣渣先贴出来python中help的帮助信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(dict.items)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">items(...)</span><br><span class="line">    D.items() -&gt; list of D's (key, value) pairs, as 2-tuples</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(dict.iteritems)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">iteritems(...)</span><br><span class="line">    D.iteritems() -&gt; an iterator over the (key, value) items of D</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(dict.viewitems)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">viewitems(...)</span><br><span class="line">    D.viewitems() -&gt; a set-like object providing a view on D's items</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在Python2.x中，items( )用于 返回一个字典的拷贝列表【Returns a copy of the list of all items (key/value pairs) in D】，占额外的内存。</p><p>&emsp;&emsp;iteritems() 用于返回本身字典列表操作后的迭代【Returns an iterator on all items(key/value pairs) in D】，不占用额外的内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="number">1</span>:<span class="string">'one'</span>,<span class="number">2</span>:<span class="string">'two'</span>,<span class="number">3</span>:<span class="string">'three'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d.items())</span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d.iteritems())</span><br><span class="line">&lt;type <span class="string">'dictionary-itemiterator'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d.viewitems())</span><br><span class="line">&lt;type <span class="string">'dict_items'</span>&gt;</span><br></pre></td></tr></table></figure><p><strong><font color="black" size="5" face="仿宋">二、Python3.x中items()：</font></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(dict.items)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">items(...)</span><br><span class="line">    D.items() -&gt; a set-like object providing a view on D's items</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Python 3.x 里面，iteritems() 和 viewitems() 这两个方法都已经废除了，而 items() 得到的结果是和 2.x 里面 viewitems() 一致的。在3.x 里 用 items()替换iteritems() ，可以用于 for 来循环遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;<span class="number">1</span>:<span class="string">'one'</span>,<span class="number">2</span>:<span class="string">'two'</span>,<span class="number">3</span>:<span class="string">'three'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(d.items())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict_items</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span>, <span class="string">'Paul'</span>: <span class="number">74</span> &#125;</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">sum = sum + value</span><br><span class="line">print(key, <span class="string">':'</span> ,value)</span><br><span class="line">print(<span class="string">'平均分为:'</span> ,sum /len(d))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\Users\WordZzzz\Desktop&gt;python3 test.py</span><br><span class="line">Adam : <span class="number">95</span></span><br><span class="line">Lisa : <span class="number">85</span></span><br><span class="line">Bart : <span class="number">59</span></span><br><span class="line">Paul : <span class="number">74</span></span><br><span class="line">平均分为: <span class="number">78.25</span></span><br></pre></td></tr></table></figure><p>关于python3.x中items具体的应用，可以通过下面的传送门到达机器学习实战中找到：</p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="items" scheme="https://github.com/yibinliao/yibinliao.github/tags/items/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Python3：string中的split()函数&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-5/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-5/</id>
    <published>2019-11-08T02:45:04.363Z</published>
    <updated>2019-11-09T08:02:44.300Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：python-3.6.2-amd64</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><h2 id="Python2-x中split-函数："><a href="#Python2-x中split-函数：" class="headerlink" title="Python2.x中split()函数："></a>Python2.x中split()函数：</h2><p>&emsp;&emsp;老规矩，help！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(str.split)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">split(...)</span><br><span class="line">    S.split([sep [,maxsplit]]) -&gt; list of strings</span><br><span class="line"></span><br><span class="line">    Return a list of the words <span class="keyword">in</span> the string S, using sep <span class="keyword">as</span> the</span><br><span class="line">    delimiter string.  If maxsplit <span class="keyword">is</span> given, at most maxsplit</span><br><span class="line">    splits are done. If sep <span class="keyword">is</span> <span class="keyword">not</span> specified <span class="keyword">or</span> <span class="keyword">is</span> <span class="literal">None</span>, any</span><br><span class="line">    whitespace string <span class="keyword">is</span> a separator <span class="keyword">and</span> empty strings are removed</span><br><span class="line">    <span class="keyword">from</span> the result.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看出，在Python2.x中，split()返回的是字符串列表。</p><h2 id="Python3-x中split-函数："><a href="#Python3-x中split-函数：" class="headerlink" title="Python3.x中split()函数："></a>Python3.x中split()函数：</h2><p>&emsp;&emsp;同样，help！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(str.split)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">split(...)</span><br><span class="line">    S.split(sep=None, maxsplit=-1) -&gt; list of strings</span><br><span class="line"></span><br><span class="line">    Return a list of the words <span class="keyword">in</span> S, using sep <span class="keyword">as</span> the</span><br><span class="line">    delimiter string.  If maxsplit <span class="keyword">is</span> given, at most maxsplit</span><br><span class="line">    splits are done. If sep <span class="keyword">is</span> <span class="keyword">not</span> specified <span class="keyword">or</span> <span class="keyword">is</span> <span class="literal">None</span>, any</span><br><span class="line">    whitespace string <span class="keyword">is</span> a separator <span class="keyword">and</span> empty strings are</span><br><span class="line">    removed <span class="keyword">from</span> the result.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;啊哦，在Python3.x中，split()返回的也是字符串列表。</p><h2 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (str.split( ))</span><br><span class="line">[<span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'string'</span>, <span class="string">'example....wow!!!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (str.split(<span class="string">'i'</span>,<span class="number">1</span>))</span><br><span class="line">[<span class="string">'th'</span>, <span class="string">'s is string example....wow!!!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (str.split(<span class="string">'w'</span>))</span><br><span class="line">[<span class="string">'this is string example....'</span>, <span class="string">'o'</span>, <span class="string">'!!!'</span>]</span><br></pre></td></tr></table></figure><p>加入正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySent=<span class="string">'This book is the best book on Python or M.L. I have ever laid eyes upon'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySent.split()                                      <span class="comment">#不带参数切分</span></span><br><span class="line">[<span class="string">'This'</span>, <span class="string">'book'</span>, <span class="string">'is'</span>, <span class="string">'the'</span>, <span class="string">'best'</span>, <span class="string">'book'</span>, <span class="string">'on'</span>, <span class="string">'Python'</span>, <span class="string">'or'</span>, <span class="string">'M.L.'</span>, <span class="string">'I'</span>, <span class="string">'have'</span>, <span class="string">'ever'</span>, <span class="string">'laid'</span>, <span class="string">'eyes'</span>, <span class="string">'upon'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>regEx = re.compile(<span class="string">'\\W'</span>)                               <span class="comment">#正则表达式，定义分隔符是除单词、数字外的任意字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listOfTokens = regEx.split(mySent)                      <span class="comment">#根据正则表达式的规则进行切分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listOfTokens</span><br><span class="line">[<span class="string">'This'</span>, <span class="string">'book'</span>, <span class="string">'is'</span>, <span class="string">'the'</span>, <span class="string">'best'</span>, <span class="string">'book'</span>, <span class="string">'on'</span>, <span class="string">'Python'</span>, <span class="string">'or'</span>, <span class="string">'M'</span>, <span class="string">'L'</span>, <span class="string">''</span>, <span class="string">'I'</span>, <span class="string">'have'</span>, <span class="string">'ever'</span>, <span class="string">'laid'</span>, <span class="string">'eyes'</span>, <span class="string">'upon'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[tok <span class="keyword">for</span> tok <span class="keyword">in</span> listOfTokens <span class="keyword">if</span> len(tok) &gt; <span class="number">0</span>]           <span class="comment">#去掉空格</span></span><br><span class="line">[<span class="string">'This'</span>, <span class="string">'book'</span>, <span class="string">'is'</span>, <span class="string">'the'</span>, <span class="string">'best'</span>, <span class="string">'book'</span>, <span class="string">'on'</span>, <span class="string">'Python'</span>, <span class="string">'or'</span>, <span class="string">'M'</span>, <span class="string">'L'</span>, <span class="string">'I'</span>, <span class="string">'have'</span>, <span class="string">'ever'</span>, <span class="string">'laid'</span>, <span class="string">'eyes'</span>, <span class="string">'upon'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[tok.lower() <span class="keyword">for</span> tok <span class="keyword">in</span> listOfTokens <span class="keyword">if</span> len(tok) &gt; <span class="number">2</span>]   <span class="comment">#全部小写，去掉长度小于3的单词</span></span><br><span class="line">[<span class="string">'this'</span>, <span class="string">'book'</span>, <span class="string">'the'</span>, <span class="string">'best'</span>, <span class="string">'book'</span>, <span class="string">'python'</span>, <span class="string">'have'</span>, <span class="string">'ever'</span>, <span class="string">'laid'</span>, <span class="string">'eyes'</span>, <span class="string">'upon'</span>]</span><br></pre></td></tr></table></figure><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="split" scheme="https://github.com/yibinliao/yibinliao.github/tags/split/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Python3：sorted()函数及列表中的sort()函数&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-4/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-4/</id>
    <published>2019-11-08T02:45:04.345Z</published>
    <updated>2019-11-09T08:02:52.263Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：python-3.6.2-amd64</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><p><strong><font color="black" size="5" face="仿宋">一、sort，sorted函数介绍：</font></strong></p><p>&emsp;&emsp;Sort函数是list列表中的函数，而sorted可以对list或者iterator进行排序。</p><p>&emsp;&emsp;下面我们使用help来查看他们的用法及功能：<br>sort：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(list.sort)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">sort(...)</span><br><span class="line">    L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*</span><br></pre></td></tr></table></figure><p>sorted：<br>Python3.x:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(sorted)</span><br><span class="line">Help on built-<span class="keyword">in</span> function sorted <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">sorted(iterable, /, *, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br><span class="line">    Return a new list containing all items <span class="keyword">from</span> the iterable <span class="keyword">in</span> ascending order.</span><br><span class="line"></span><br><span class="line">    A custom key function can be supplied to customize the sort order, <span class="keyword">and</span> the</span><br><span class="line">    reverse flag can be set to request the result <span class="keyword">in</span> descending order.</span><br></pre></td></tr></table></figure><p>Python2.x:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(sorted)</span><br><span class="line">Help on built-<span class="keyword">in</span> function sorted <span class="keyword">in</span> module __builtin__:</span><br><span class="line"></span><br><span class="line">sorted(...)</span><br><span class="line">    sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好吧，Python3.x和Python2.x的sorted函数有点不太一样，少了cmp参数。下面本渣渣主要基于Python2.x的sorted函数进行讲解，Python3.x直接忽略cmp这个参数即可，为了保证代码通用性，不建议大家在今后的编程中使用cmp参数。</p><p><strong><font color="black" size="5" face="仿宋">二、sort和sorted的比较：</font></strong></p><p>&emsp;&emsp;用sort函数对列表排序时会影响列表本身，而sorted不会。<br>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Python2.x的sorted函数：sorted(iterable，cmp，key，reverse）<br>参数：</p><ul><li>iterable可以是list或者iterator；</li><li>cmp是带两个参数的比较函数；</li><li>key 是带一个参数的函数；</li><li>reverse为False或者True；</li></ul><p>举例说明:<br>（1）用cmp函数排序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [(<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'mary'</span>,<span class="number">90</span>), (<span class="string">'sara'</span>,<span class="number">80</span>),(<span class="string">'lily'</span>,<span class="number">95</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1,cmp = <span class="keyword">lambda</span> x,y: cmp(x[<span class="number">0</span>],y[<span class="number">0</span>]))</span><br><span class="line">[(<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'sara'</span>, <span class="number">80</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1,cmp = <span class="keyword">lambda</span> x,y: cmp(x[<span class="number">1</span>],y[<span class="number">1</span>]))</span><br><span class="line">[(<span class="string">'sara'</span>, <span class="number">80</span>), (<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>)]</span><br></pre></td></tr></table></figure><p>（2）用key函数排序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [(<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'mary'</span>,<span class="number">90</span>), (<span class="string">'sara'</span>,<span class="number">80</span>),(<span class="string">'lily'</span>,<span class="number">95</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1,key = <span class="keyword">lambda</span> list1: list1[<span class="number">0</span>])</span><br><span class="line">[(<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'sara'</span>, <span class="number">80</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1,key = <span class="keyword">lambda</span> list1: list1[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'sara'</span>, <span class="number">80</span>), (<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>)]</span><br></pre></td></tr></table></figure><p>（3）用reverse排序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1,reverse = <span class="literal">True</span>)</span><br><span class="line">[(<span class="string">'sara'</span>, <span class="number">80</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>), (<span class="string">'david'</span>, <span class="number">90</span>)]</span><br></pre></td></tr></table></figure><p>（4）用operator.itemgetter函数排序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1, key=itemgetter(<span class="number">1</span>))</span><br><span class="line">[(<span class="string">'sara'</span>, <span class="number">80</span>), (<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1, key=itemgetter(<span class="number">0</span>))</span><br><span class="line">[(<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'sara'</span>, <span class="number">80</span>)]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;介绍operator.itemgetter函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = operator.itemgetter(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(a)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;operator.itemgetter函数获取的不是值，而是定义了一个函数。</p><p>（5）多级排序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(list1, key=itemgetter(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">[(<span class="string">'david'</span>, <span class="number">90</span>), (<span class="string">'lily'</span>, <span class="number">95</span>), (<span class="string">'mary'</span>, <span class="number">90</span>), (<span class="string">'sara'</span>, <span class="number">80</span>)]</span><br></pre></td></tr></table></figure><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="sort" scheme="https://github.com/yibinliao/yibinliao.github/tags/sort/"/>
    
      <category term="sorted" scheme="https://github.com/yibinliao/yibinliao.github/tags/sorted/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Python3：operator模块中的itemgetter()函数&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-3/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-3/</id>
    <published>2019-11-08T02:45:04.344Z</published>
    <updated>2019-11-09T08:03:00.048Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：python-3.6.2-amd64</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><p>&emsp;&emsp;和之前一样，本渣渣先贴出来python中help的帮助信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(operator.itemgetter)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">itemgetter</span> <span class="title">in</span> <span class="title">module</span> <span class="title">operator</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">itemgetter</span><span class="params">(builtins.object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">itemgetter</span><span class="params">(item, ...)</span> --&gt; itemgetter object</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  Return a callable object that fetches the given item(s) from its operand.</span></span><br><span class="line"><span class="class"> |  After f = itemgetter(2), the call f(r) returns r[2].</span></span><br><span class="line"><span class="class"> |  After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  Methods defined here:</span></span><br><span class="line"> |</span><br><span class="line"> |  __call__(self, /, *args, **kwargs)</span><br><span class="line"> |      Call self <span class="keyword">as</span> a function.</span><br><span class="line"> |</span><br><span class="line"> |  __getattribute__(self, name, /)</span><br><span class="line"> |      Return getattr(self, name).</span><br><span class="line"> |</span><br><span class="line"> |  __new__(*args, **kwargs) <span class="keyword">from</span> builtins.type</span><br><span class="line"> |      Create <span class="keyword">and</span> <span class="keyword">return</span> a new object.  See help(type) <span class="keyword">for</span> accurate signature.</span><br><span class="line"> |</span><br><span class="line"> |  __reduce__(...)</span><br><span class="line"> |      Return state information <span class="keyword">for</span> pickling</span><br><span class="line"> |</span><br><span class="line"> |  __repr__(self, /)</span><br><span class="line"> |      Return repr(self).</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;operator.itemgetter函数<br>operator模块提供的itemgetter函数用于获取对象的哪些维的数据，参数为一些序号（即需要获取的数据在对象中的序号），下面看例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=operator.itemgetter(<span class="number">1</span>)      //定义函数b，获取对象的第<span class="number">1</span>个域的值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(a) </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=operator.itemgetter(<span class="number">1</span>,<span class="number">0</span>)   //定义函数b，获取对象的第<span class="number">1</span>个域和第<span class="number">0</span>个的值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(a) </span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;要注意，operator.itemgetter函数获取的不是值，而是定义了一个函数，通过该函数作用到对象上才能获取值。</p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="itemgetter" scheme="https://github.com/yibinliao/yibinliao.github/tags/itemgetter/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Python3：numpy模块中的argsort()函数&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-2/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-2/</id>
    <published>2019-11-08T02:45:04.342Z</published>
    <updated>2019-11-09T08:03:08.989Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：python-3.6.2-amd64</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><p>&emsp;&emsp;argsort函数是Numpy模块中的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(numpy.argsort)</span><br><span class="line">Help on function argsort <span class="keyword">in</span> module numpy.core.fromnumeric:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">argsort(a, axis=<span class="number">-1</span>, kind=<span class="string">'quicksort'</span>, order=<span class="literal">None</span>)</span><br><span class="line">Returns the indices that would sort an array.</span><br><span class="line"></span><br><span class="line">Perform an indirect sort along the given axis using the algorithm specified</span><br><span class="line">by the `kind` keyword. It returns an array of indices of the same shape <span class="keyword">as</span></span><br><span class="line">`a` that index data along the given axis <span class="keyword">in</span> sorted order.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从中可以看出argsort函数返回的是数组值从小到大的索引值</p><p>Examples：</p><p>One dimensional array:一维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(x)</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>Two-dimensional array:二维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([[<span class="number">0</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(x, axis=<span class="number">0</span>) <span class="comment">#按列排序</span></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(x, axis=<span class="number">1</span>) <span class="comment">#按行排序</span></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>Examples：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(x) <span class="comment">#按升序排列</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argsort(-x) <span class="comment">#按降序排列</span></span><br><span class="line">array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[np.argsort(x)] <span class="comment">#通过索引值排序后的数组</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[np.argsort(-x)]</span><br><span class="line">array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>另一种方式实现按降序排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = x[np.argsort(x)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]</span><br><span class="line">array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="argsort" scheme="https://github.com/yibinliao/yibinliao.github/tags/argsort/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;Python3：input()函数&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-1/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-py-1/</id>
    <published>2019-11-08T02:45:04.341Z</published>
    <updated>2019-11-09T08:03:16.662Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：python-3.6.2-amd64</strong></li><li><strong>编&emsp;&emsp;者：WordZzzz</strong></li></ul><hr><h2 id="Python2-x中range-函数："><a href="#Python2-x中range-函数：" class="headerlink" title="Python2.x中range()函数："></a>Python2.x中range()函数：</h2><p>&emsp;&emsp;老规矩，help！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(range)</span><br><span class="line">Help on built-<span class="keyword">in</span> function range <span class="keyword">in</span> module __builtin__:</span><br><span class="line"></span><br><span class="line">range(...)</span><br><span class="line">    range(stop) -&gt; list of integers</span><br><span class="line">    range(start, stop[, step]) -&gt; list of integers</span><br><span class="line"></span><br><span class="line">    Return a list containing an arithmetic progression of integers.</span><br><span class="line">    range(i, j) returns [i, i+<span class="number">1</span>, i+<span class="number">2</span>, ..., j<span class="number">-1</span>]; start (!) defaults to <span class="number">0.</span></span><br><span class="line">    When step <span class="keyword">is</span> given, it specifies the increment (<span class="keyword">or</span> decrement).</span><br><span class="line">    For example, range(<span class="number">4</span>) returns [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].  The end point <span class="keyword">is</span> omitted!</span><br><span class="line">    These are exactly the valid indices <span class="keyword">for</span> a list of <span class="number">4</span> elements.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看出，在Python2.x中，range()返回的是可以用来迭代的列表。</p><h2 id="Python3-x中range-函数："><a href="#Python3-x中range-函数：" class="headerlink" title="Python3.x中range()函数："></a>Python3.x中range()函数：</h2><p>&emsp;&emsp;同样，help！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(range)</span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">range</span> <span class="title">in</span> <span class="title">module</span> <span class="title">builtins</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">range</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">range</span><span class="params">(stop)</span> -&gt; range object</span></span><br><span class="line"><span class="class"> |  range(start, stop[, step]) -&gt; range object</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |  Return an object that produces a sequence of integers from start (inclusive)</span></span><br><span class="line"><span class="class"> |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.</span></span><br><span class="line"><span class="class"> |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.</span></span><br><span class="line"><span class="class"> |  These are exactly the valid indices for a list of 4 elements.</span></span><br><span class="line"><span class="class"> |  When step is given, it specifies the increment (or decrement).</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;啊哦，在Python3.x中，range()返回的是一个range对象。</p><h2 id="样例对比："><a href="#样例对比：" class="headerlink" title="样例对比："></a>样例对比：</h2><p>Python2.x：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>Python3.x：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过list强制类型转换，可以在Python3.x中实现Python2.x中的range函数一样的效果。</p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/categories/Python3/"/>
    
    
      <category term="Python3" scheme="https://github.com/yibinliao/yibinliao.github/tags/Python3/"/>
    
      <category term="input" scheme="https://github.com/yibinliao/yibinliao.github/tags/input/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;CVPR2014 Objectness BING 源码编译&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-bing-3/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-bing-3/</id>
    <published>2019-11-08T02:45:04.340Z</published>
    <updated>2019-11-09T08:03:25.280Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：VS2013+OpenCV2.4.13</strong></li><li><strong>编者: WordZzzz</strong></li></ul><hr><h2 id="一、资源"><a href="#一、资源" class="headerlink" title="一、资源"></a>一、资源</h2><p>1.论文作者主页：<a href="http://mmcheng.net/zh/bing/" target="_blank" rel="noopener">http://mmcheng.net/zh/bing/</a><br>2.代码下载地址：<a href="http://mmcheng.net/zh/code-data/" target="_blank" rel="noopener">http://mmcheng.net/zh/code-data/</a><br>3.数据集下载地址：<a href="http://mmcheng.net/zh/bing/" target="_blank" rel="noopener">http://mmcheng.net/zh/bing/</a></p><h2 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h2><p>&emsp;&emsp;如果你用的是Visual Studio 2012，正好电脑也支持X64平台，那么你只需要配置一下VS2012下的OpenCV（版本要求2.4.8以上），下载的程序就可以直接用了。<br>&emsp;&emsp;我做了一些排雷的动作，尝试了Visual Studio 2013中Release、Debug中的x64和win32版本，即：Release+x64、Debug+x64、Release+win32、Debug+win32.但是因为本渣渣能力有限，最终没能把Visual Studio 2013中的Debug+win32版本跑出来。</p><p>1.解压下载的源码：<br>&emsp;&emsp;解压后文件夹内容如图所示：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903110934676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>2.解压VOC2007数据集：<br>&emsp;&emsp;在上图的源码文件中我们也可以看到有个VOC2007文件夹，里面只有ImageSets一个文件夹（里面是训练时会用到的文本文档）。在这一步，我们要把下载好的800多MB的数据集解压到源码的VOC2007文件夹下。（注意在解压过程中当出现是否覆盖的选项时，一律选择跳过,虽然覆盖了也不是很影响效果。）</p><p>3.用VS2013打开解决方案，提示升级VC++编译器和库，直接点击确定就好：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111124791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>4.X64-&gt;WIN32:</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111218240?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111248523?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111311467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>添加win32配置管理器，注意一定要从x64继承下来其他东西。</p><p>5.配置LibLinear：</p><ul><li>右键LibLinear，选为启动项目；</li><li>在linear.cpp文件中，修改print_string_stdout函数为：extern “C” static void print_string_stdout(const char *s)</li><li>静态库配置：</li></ul><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111729176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>6.LibLinear代码生成：<br>&emsp;&emsp;最重要的就是这一块的东西了，我直接把四种配置的截图贴在这里，注意，MT对应Release，MTD对应Debug，但是作者的Debug版本用的是DLL(/MDd)，所以本渣渣在Debug版本中也没做更改：</p><p>Release+x64：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111535986?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>Debug+x64：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111413318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>Release+win32：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111515044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>Debug+win32（失败）：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903111445504?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>&emsp;&emsp;ctrl+F5之后在相应目录下生成LibLinear.lib静态库，记下这个地址。<br>7.配置Objectness：<br>&emsp;&emsp;以Debug+win32的配置为例进行介绍（虽然配置失败，但是这些属性设置是通用的，所以没有更新截图）</p><ul><li><p>右键Objectness，选为启动项目；</p></li><li><p>打开Debug属性，链接器-&gt;附加库目录，添加LibLinear.lib的目录；（注意:链接库依赖项 要设为是（yes））</p></li><li><p>用_popcnt函数实现_popcnt64函数功能：需要自己动手在INT64类型基础上写函数。要加头文件#include&lt;intrin.h&gt;在stdafx.h中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">inline</span> <span class="selector-tag">INT64</span> __<span class="selector-tag">popcnt64</span>(<span class="selector-tag">INT64</span> <span class="selector-tag">x</span>)</span><br><span class="line">&#123;</span><br><span class="line">       return __popcnt((unsigned int)(x )) +__popcnt((unsigned int)(x&gt;&gt; 32));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>8.配置opencv：<br>&emsp;&emsp;这里大家可以参考浅墨的博客进行配置，当然本渣渣要是有时间了也会写一篇博客并在此更新链接。浅墨opencv配置链接：<br><a href="http://blog.csdn.net/poem_qianmo/article/details/19809337" target="_blank" rel="noopener">http://blog.csdn.net/poem_qianmo/article/details/19809337</a></p><p>&emsp;&emsp;这里我只贴出一些需要填写路径的截图：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903150731185?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903150751508?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903150810256?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903150831273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903150858382?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>&emsp;&emsp;<strong><font color="red" size="3" face="仿宋">需要注意的是上图部分，Debug版本就用d结尾的库，Release版本就用不带d结尾的库，千万不要像浅墨那样两个版本都塞进去，否则会莫名其妙报错。</font></strong></p><p>9.再次配置Objectness的代码生成，和第6步是一样的。</p><p>&emsp;&emsp;ctrl+F5之后，运行成功。</p><p>10.效果展示：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903151152107?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170903151223762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></div><p></p><p>11.其他：<br>&emsp;&emsp;如果想优化代码，可以打开openmp，并且设置一下优化等级，本渣渣在这里只是为了看处理效果，所以就没做优化的配置。关于优化配置可参考链接（有些情况不一定好使）：<a href="http://www.cnblogs.com/larch18/p/4560690.html" target="_blank" rel="noopener">http://www.cnblogs.com/larch18/p/4560690.html</a></p><p><strong><font color="red" size="3" face="仿宋">系列教程持续发布中，欢迎订阅、关注、收藏、评论、点赞哦～～(￣▽￣～)～</font></strong></p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="BING" scheme="https://github.com/yibinliao/yibinliao.github/categories/BING/"/>
    
    
      <category term="BING" scheme="https://github.com/yibinliao/yibinliao.github/tags/BING/"/>
    
      <category term="源码" scheme="https://github.com/yibinliao/yibinliao.github/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【转】&quot;CVPR2014 Objectness BING 源码详解&quot;</title>
    <link href="https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-bing-2/"/>
    <id>https://github.com/yibinliao/yibinliao.github/2019/11/08/2017-10-01-bing-2/</id>
    <published>2019-11-08T02:45:04.338Z</published>
    <updated>2019-11-09T08:03:33.402Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><strong>转载请注明作者和出处：<a href="http://blog.csdn.net/u011475210" target="_blank" rel="noopener">http://blog.csdn.net/u011475210</a></strong></li><li><strong>操作系统：WINDOWS 10</strong></li><li><strong>软件版本：VS2013+OpenCV2.4.13</strong></li><li><strong>编者: WordZzzz</strong></li></ul><hr><h2 id="一、样本生成："><a href="#一、样本生成：" class="headerlink" title="一、样本生成："></a>一、样本生成：</h2><h3 id="1-正样本"><a href="#1-正样本" class="headerlink" title="1.正样本"></a>1.正样本</h3><p>&emsp;&emsp;算法首先对每张图像上可能的所有标注框采样,生成不同尺度（该尺度在一定经验值范围内）的样本位置，并计算新生成的正样本与原始样本重叠率，保留重叠率超过50%的，重新归一化到8 * 8大小，计算新生成的有效正样本的梯度特征，并在水平方向翻转，最终保存新生成样本8 * 8的梯度特征与该特征的水平翻转特征作为xP.</p><h3 id="2-负样本"><a href="#2-负样本" class="headerlink" title="2.负样本"></a>2.负样本</h3><p>&emsp;&emsp;固定100次随机产生100个备选的负样本窗口，筛选出与每张图片中，与所有目标的重叠率都小于50%的负样本窗，并将该窗口内保存图像作为负样本。</p><h3 id="3-尺度处理"><a href="#3-尺度处理" class="headerlink" title="3.尺度处理"></a>3.尺度处理</h3><p>&emsp;&emsp;在筛选有效正样本时，同时保存了水平，垂直尺度系数，但是实际保存的尺度是归一化映射后的值，即(h - min) * num + w - min + 1,其中h,w表示筛选出的有效正样本相对原始目标的垂直，水平尺度系数，实际上，还是保存的尺度系数，只是在数据结构上，采用哈希映射存储罢了。</p><h3 id="4-判定有效样本"><a href="#4-判定有效样本" class="headerlink" title="4.判定有效样本"></a>4.判定有效样本</h3><p>&emsp;&emsp;程序下一步，会在上面采样生成的所有有效正样本，进行直方图统计，统计出每个尺度下的样本数。例如有2500多个图像文件，计算所有正样本数，统计每个尺度下的正样本数。根据统计结果，剔除掉正样本数少于50的尺度。保存剩下的尺度统计结果，接着，对所有正负样本，统一分配到一个二维矩阵，垂直表示样本数，水平表示样本的8<em>8梯度特征值，直接保存。<br>以上，属于该算法的第一个亮点。<br>&emsp;&emsp;算法主要是用来加速传统的滑动窗口对象检测，通过训练通用的对象估计方法来产生候选对象窗口。作者观察到一般对象都会有定义完好的封闭轮廓，而且通过将相关图像窗口重置为固定大小，就可以通过梯度幅值进行区分。基于以上的观察以及复杂度的考虑，为了明确训练方法，将窗口固定为8</em>8的，并将梯度幅值转化为一个简单的64维的特征来描述这个窗口。这就相当于我们看路上走的人一样，在很远的地方即使我们没看清楚脸，只是看到一个轮廓也能识别出是不是我们认识的人，反而，如果脸贴着脸去看一个人可能会认不出来。<br>&emsp;&emsp;也就是作者发现，在固定窗口的大小下，物体与背景的梯度模式有所不同。如下图所示。图（a）中绿框代表背景，红框代表物体。如果把这些框都resize成固定大小，比如8X8，然后求出8X8这些块中每个点的梯度（Normed Gradient，简称NG特征，叫赋范梯度特征，就是计算梯度范数，即<code>!$\sqrt{(g_x^2 + g_y^2)}$</code>,实际就是该点的L2范数梯度，但是作者实现时，采用-1,0,1方式计算gx或者gy,因此，用|gx| + |gy|近似代替梯度的L2范数），可以明显看到物体与背景的梯度模式的差别，如图1（c）所示，物体的梯度分布呈现出较为杂乱的模式，而背景的较为单一和清楚。其实这个道理很浅显，就是图像中背景区域往往呈现出homogeneous的特性，早期的图像区域分割方法就是依靠这种特性来做的。然后我个人觉得这里不一定要用梯度，用其他一些统计特征甚至是图像特征都有可能得到类似的结果。<br>&emsp;&emsp;所以，作者首先将所有的标注样本，用不同尺度缩放采样，将采样出的有效正样本统一缩放到8 * 8，计算NG特征，也就是下面图中a生成c在过程。这样，通过SVM训练这些NG特征，得到目标和背景的第一次区分模型。<br>&emsp;&emsp;下面是原文的解释<br>&emsp;&emsp;对象一般是具有很好定义封闭轮廓和中心的。重置窗口的时候，就相当于将现实中的对象缩小到一个固定大小，因为在封闭的轮廓中，图像梯度变化很小，所以它是一个很好的可区分特征，就像是图1中，轮船和人在颜色，形状，纹理，光照等方面都有很大的不同，他们在梯度空间都存在共性。为了有效地利用观察结果，我们首先将输入图像重置为不同尺度的，在不同的尺度下计算梯度。然后再重置为取8 * 8大小的框，作为一个对应图像的64维的NG特征。<br>我们采用的NG特征，是一个密集的且紧凑的objectness特性，有以下几点优势：首先，由于归一化了支持域，所以无论对象窗口如何改变位置，尺度以及纵横比，它对应的NG特征基本不会改变。也就是说，NG特征是对于位置，尺度，纵横比是不敏感的，这一点是对于任意类别对象检测是很有用的。</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170823181219294?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="800" height="700"></div><p></p><p>&emsp;&emsp;图1 尽管对象（红色）和背景（绿色），在图像空间（a）呈现出了很大的不同，通过一个适当的尺度和纵横比，我们将其分别重置为固定大小(b)，他们对应的NG特征(c)表现出很大的共性,基于NG特征，我们学习了一个简单的64D线性模型（d），用来筛选对象窗口。<br>这种不敏感的特性是一个好的对象检测方法应该具备的。第二，NG特征的紧凑性，使得计算和核实更加有效率，而且能够很好的应用在实时应用程序中。<br>NG特征的缺点就是识别能力不够。但一般而言，会采用检测器来最终缺点结果的误报率。</p><h2 id="二、两级SVM训练："><a href="#二、两级SVM训练：" class="headerlink" title="二、两级SVM训练："></a>二、两级SVM训练：</h2><h3 id="1-SVM第一级训练"><a href="#1-SVM第一级训练" class="headerlink" title="1.SVM第一级训练"></a>1.SVM第一级训练</h3><p>&emsp;&emsp;首先，算法传递进入第一级SVM的样本总数，在超过SVM默认参数值时，采用SVM默认训练总样本数。用所有正样本以及剩下的数量采用随机从原负样本中抽取。即，负样本在这种情况下，不是全部参加SVM第一级训练。而是随机抽取一部分，保证总样本数达到SVM默认训练总样本数。<br>&emsp;&emsp;算法做一些SVM的初始化，涉及到样本标签Y，实际上，正样本默认都为有标签，以及SVM参数初始化等。<br>&emsp;&emsp;通过第一级SVM训练后，算法生成第一级SVM模型，转换成8 * 8，并归一化到1~255，保存。该模型w是用来下文中投票打分的，为第二级SVM学习做准备。</p><h3 id="2-二值化模型参数w"><a href="#2-二值化模型参数w" class="headerlink" title="2.二值化模型参数w"></a>2.二值化模型参数w</h3><p>&emsp;&emsp;首先通过上面的训练，我们可以得到分类的模型线性w，第一个要二值化的目标就是它，二值化的思想可以简单想象成找若干个基向量，并用这些基向量的线性组合来记表示w， 而且这些基向量的每一维只能取1或者-1（二值嘛）。那么假设我们用了Nw个基向量，每个基向量为aj, j = 1,…,Nw，那么就有<code>!$ w ≈  \sum_{j=1}^{N_w} \beta_j \alpha_j$</code>。具体模型的二值化近似可以按如下算法1的步骤进行：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170823184337349?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="800" height="400"></div><p></p><p>&emsp;&emsp;算法1的步骤也很明确，每一个都生成一个基向量，此基向量每一维都是由当前残差的符号决定，然后用当前残差减去残差在这基向量的投影（相当于去掉模型在这一维上的分量）。但在计算中因为二进制位只能为0或者1，所以为了处理方便，取：$\alpha_j^+∈{ 0,1 }^{64}$,那么就可以将基向量表示为$\alpha_j = \alpha_j^+ - \overline{\alpha_j^+}$。即基向量二进制与该二进制表示的补。<br>&emsp;&emsp;也就是说，αj表示基向量{-1,1}，βj表示校准系数，同时，将每个基向量，映射到一个64位类型的数据中。<br>这里，实际上采用Gram-Schmidt正交化，只取了包含大部分信息的前Nw个正交向量作为输出，目的也是为了降低计算量。二值化的目的在于后期位运算，后面还会把NG特征也二值化。直接采用硬件指令大幅度地提升速度。<br>&emsp;&emsp;代码中，Nw取2，也就是SVM生成的W 是8 * 8矩阵，矩阵元素任意值，通过这个二值化过程，生成2个基向量，每个基向量完全覆盖了W中每个元素，但是此时在基向量中，每个元素对应的取值变成0或者1，因此，原w的64个元素，拼接成了一个64位的单个数据，即基向量。同时，对应该基向量的校准系数，算法为了后期加速，只近似处理高4位的数据，因此，校准系数只有保存4个，且都是一样的值，但是由于后期位移运算，这里就把校准值放置到了对应bit位。于是，2个基向量，生成8个校准系数，2个64位的数据。</p><h3 id="3-打分窗口"><a href="#3-打分窗口" class="headerlink" title="3.打分窗口"></a>3.打分窗口</h3><p>&emsp;&emsp;为了找到图像中的一般对象，对每张训练图像（注意，这里是原图像，不是标注框），进行上文生成正样本时得到所有尺度的量化，扫描每个尺度定义好的量化窗口（依据尺度或者是纵横比，也就是说，这里只是对原图像依据之前尺度系数做缩放，不是缩放到8 * 8,因此，才有下文的I）。每一个窗口通过上文得到模型w获得得分</p><p>$$<br>s_l = &lt; w,g_l &gt;(1)<br>$$</p><p>$$<br>l = &lt; i,x,y &gt;(2)<br>$$<br>&emsp;&emsp;$s_l$ 代表过滤器得分，  $g_l$ 代表NG特征，  $l$表示坐标，  $i$表示尺度，  $(x,y)$表示窗口位置。运用非最大抑制(NMS)，我们为每个尺度提供一些建议窗口。相对于其他窗口（例如：100 * 100），一些尺度（例如:10 * 500）的窗口包含对象的可能性是很小的。因此我们定义对象状态得分（校准过滤器得分）：</p><p>$$<br>o_l = v_i · s_l + t_i  (3)<br>$$</p><p>&emsp;&emsp;只需要按位与和字节统计操作.下面解释如何得到b.<br>因此，为了实现（1）的快速计算，作者先用上面的算法，二值化了w,现在开始二值化NG，即gl参数，得到上面的b.</p><p>&emsp;&emsp;接下来我们还要对NG特征进行二值化，还记得我们刚才将NG归一化到[0,255]之间吧，那么8 * 8窗口上的每个点的NG特征值就可以用一个byte来存储，也就是每个值我们都可以用一个8位的二进制串来表示。那么我们就有一个8X8X8的三维矩阵，前两维是窗口位置（行，列），第三维是在二进制串中的位置（页）。举个例子，比如窗口中第1行，第2列的NG特征值是192，换成二进制就是1100 0000，那么矩阵的元素（1,2,1） = （1,2,2）= 1，（1,2,3），…,（1,2,8）= 0;那么我们一页一页地将矩阵元素取出来，再将每页8X8的矩阵元素排成一个64位的二进制串并存进一个int64里。既然思路已经有了，做法也就很简单了：对于每一页，将每一行每个元素取出来，不断加入int64中并左移1位，最后得到那个int64每一位对应的元素坐标排列就应该是（1,1）（1,2）（1,3）…(8,8)。然后作者在这里又玩了一个trick，他说你这样每次移动一位不是要循环64次嘛，如果先将8个拼成一组（就是刚才那样左移1次），那么只需要移动8组就好了啊！而且，这样在相邻的窗口中还能重用重叠的部分（在VS2010 的Debug模式下我试了下，1个数“每次左移1位，移动1万次”和“每次左移100位，移动100次”两种情况，的确是后者速度快）。<br>最后，为了进一步节省存储空间，还可以只取NG值的高位来作二值化。因为比如192和193、194，它们的二进制表达分别是1100 0000， 1100 0001和 1100 0010，要是我只看前面4位，后面4位忽略（取0）的话，那么它们的取值都是192。也就是我们可以用192来约等于193和194，这样我们就不需要用到8位那么多了！写成公式就是下面的式（2）这样，其中Ng 是我们要用的高位的位数（也就是前面说的三维矩阵的页）,bk,l就是对应三维矩阵中的第k页（二值）。</p><p>最后将二值化模型w和二值化NG，结合起来对窗口打分的操作由卷积运算变成了大部分是位运算操作，</p><p>&emsp;&emsp;一个图像窗口对应的BING特征  $b_{k,l}$ 的过滤器得分,见式(1),可以表示为：</p><p>$$<br>s_l≈ \sum_{j=1}^{N_w}\beta_j\sum_{k=1}^{N_g}C_{j,k}<br>$$</p><p>&emsp;&emsp;其中，  $C_{j,k} = 2^{8-k}(2&lt; \alpha_j^+,b_{k,l}&gt;-|b_{k,l}|)$可以通过一些快速的按位操作以及SSE指令操作计算得到。</p><p>&emsp;&emsp;然后，运用非最大抑制(NMS)，做下滤波。</p><p>&emsp;&emsp;总结一下：首先，根据第一级SVM得到模型参数w,对每张训练图像，进行所有尺度变换（不是固定8*8大小），然后计算NG特征，接着根据上文的打分系统，计算每个尺度下的sl（实际上，二值化w和二值化NG特征，就是BING特征）.并重新排序，利用NMS消除掉高分点附近领域内的打分值。这里只选择指定阈值以上的高分点。然后，在原始图像，找到对应打分点对应的方框大小，并保存。这样，针对每张图像，我们计算了不同尺度i下的打分项以及相对应的可能目标匡。然后，针对所有可能的目标匡，我们将其与原始图像中所有有效正样本做重叠率比对，只要有一个正样本框与该可能目标匡重叠与大于0.5，则该可能目标匡作为正样本，否则为负样本。在传入第二级SVM时，作者将可能目标框的打分值，重新根据尺度整合，即不同尺度下下，所有的打分值，作为正负样本。在第二级训练时，针对每个尺度，训练一次。</p><h3 id="4-第二级SVM训练"><a href="#4-第二级SVM训练" class="headerlink" title="4.第二级SVM训练"></a>4.第二级SVM训练</h3><p>&emsp;&emsp;作者针对每种尺度下的打分值，训练SVM，每种尺度下样本总数不超过10W。超过，则随机在正负样本中抽取。确保先读取正样本，后需剩余的位置随即用负样本填满。训练结束后，生成新的权值vi,ti.</p><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><p>&emsp;&emsp;在读入测试图片后，计算图像的BING特征，跟二级SVM训练预处理一样，对图像进行不同尺度的缩放，计算NG，打分统计得到sl（用的还是第一级模型的w）</p><p>&emsp;&emsp;然后，为每个尺度提供一些建议窗口。相对于其他窗口（例如：100 * 100），一些尺度（例如:10 * 500）的窗口包含对象的可能性是很小的。<br>&emsp;&emsp;针对不同尺度i的窗口，得到不同的独立学习系数。使用校准函数(3)是非常快的，通常只需要在最终的建议窗口重排。<br>这里，打分用的权值是二级模型训练出的，即上文的vi,ti.得到ol重新排序。整个过程，计算时间，给出每个检测图象的平均测试时间。并保存打分结果与对应的目标框。</p><p>&emsp;&emsp;打分越高，越接近目标。实际上，算法生成的就是打分窗口，也就是所为的对象状态。下面测试的时候，根据打分窗口与标注的测试窗口重叠率大于0.5就认为检测到了。<br>接着，作者开始绘制结果，根据检测出的候选框与每个测试标注框计算重叠率，大于0.5，就认为检测到了，否则score为0未检到。之后，计算平均重叠率和平均检测率。</p><p>这里解释下重叠率：</p><p></p><div align="center"><img src="http://img.blog.csdn.net/20170823185011109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTQ3NTIxMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" width="800" height="700"></div><p></p><p>&emsp;&emsp;上面的精度曲线称为DR-#WIN curves，源自TPAMI 2012的一篇论文：Measuring the objectness of image windows。原文还提出了将窗口数量比如[[0,5000]归一化到[0,1]之间，用曲线下的面积作为目标检测的度量结果，并称之为the area under the curve(AUC)，这样AUC的范围就在[0,1]之间了。</p><p>&emsp;&emsp;DR的计算是参考The PASCAL Visual Object Classes (VOC) Challenge，目标检测任务中DR的计算的是true/false positive精度，将算法检测目标结果放到groud truth中，将“预测目标区域与groud truth区域的交集”除以“预测目标区域与groud truth区域的并集”作为DR：</p><p>&emsp;&emsp;DR自少在50%以上才算目标检测正确，其实，50%已经是很低的了，几乎不能做为检测结果。</p><p>&emsp;&emsp;自己在程序中加了单张图片测试的显示部分，如果有同学需要可以私信我。</p><p><strong><font color="red" size="3" face="仿宋">完的汪(∪｡∪)｡｡｡zzz</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转载请注明作者和出处：&lt;a href=&quot;http://blog.csdn.net/u011475210&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/u011475210&lt;/a
      
    
    </summary>
    
    
      <category term="BING" scheme="https://github.com/yibinliao/yibinliao.github/categories/BING/"/>
    
    
      <category term="BING" scheme="https://github.com/yibinliao/yibinliao.github/tags/BING/"/>
    
      <category term="源码" scheme="https://github.com/yibinliao/yibinliao.github/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
